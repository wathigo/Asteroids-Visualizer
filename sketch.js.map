{"version":3,"sources":["../../../../../usr/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","src/helpers/color_luminance.js","src/helpers/create_asteroids.js","src/helpers/create_rock.js","src/helpers/create_spotlights.js","src/sketch.js","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","value","x","copy","global","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","Math","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","type","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","pixelRatio","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","aspect","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","canvas","gl","attribs","names","getContext","createCanvas","context","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","animate","_resizeHandler","resize","render","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","time","fps","_computeCurrentFrame","_getSizeProps","viewportWidth","viewportHeight","dispose","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","k","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","canvasSketch","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","renderer","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","EPSILON","pow","isInteger","sign","Function","defineProperty","index","nextKey","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","event","array","_lut","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","_defineProperties","descriptor","enumerable","configurable","writable","_createClass","Constructor","protoProps","staticProps","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_assertThisInitialized","self","ReferenceError","_canvas","Vector2","_proto","setScalar","scalar","setX","setY","setComponent","getComponent","clone","v","add","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","getInverse","matrix","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","uuid","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","transformUv","uv","Vector4","z","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","_s","_s2","_s3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Vector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","count","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","v0","extents","j","_testAxis","p0","p1","p2","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","_v1$1","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","isVector3","t14","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","Euler","DefaultOrder","asin","setFromQuaternion","_matrix","setFromVector3","reorder","newOrder","_quaternion$1","toVector3","optionalResult","RotationOrders","Layers","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","defineProperties","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","material","uuids","_i","_l","_i2","extractFromCache","_shapes","values","recursive","parse","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","isColor","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","color","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","normalized","NAMES","Face3","materialIndex","vertexNormals","vertexColors","_il","materialId","Material","fog","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","_data","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","DirectGeometry","vertices","normals","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","_vertexUvs","morphTarget","_j","morphNormal","arrayMax","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","_attribute","_attribute2","_attribute3","lineDistancesNeedUpdate","_attribute4","lineDistance","fromDirectGeometry","morphAttributesPosition","isGLBufferAttribute","_il2","_morphAttribute","jl","computeFaceNormals","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","_i3","_il3","vA","vB","vC","_i4","_il4","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","indices","array2","geometry2","newAttribute","_name","morphArray","morphAttribute","_newAttribute","_i5","_key","attributeData","hasMorphAttributes","_key2","attributeArray","_attribute6","_attributeData","_name2","_i6","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","isSkinnedMesh","boneTransform","intersection","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","_a","_b","_c","_group","_groupMaterial","_jl","isMultiMaterial","fl","faceMaterial","fvA","fvB","fvC","uvs_f","BoxBufferGeometry","_BufferGeometry","depth","widthSegments","heightSegments","depthSegments","_this","scope","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","_iy","_ix","cloneUniforms","property","isMatrix3","isMatrix4","isVector2","isVector4","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","PerspectiveCamera","fov","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","stencil","CubeTexture","_needsFlipEnvMap","WebGLCubeRenderTarget","dummy","DataTexture","isCubeTexture","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","isDataTexture","_sphere$1","_vector$5","Frustum","p4","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","state","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","_buffer","_type","instanceColor","_buffer2","_type2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","has","currentRenderList","getRenderList","currentRenderState","getRenderState","setRenderList","setRenderState","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","_influence","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","DataTexture2DArray","wrapR","DataTexture3D","physical","transmission","transmissionMap","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","environment","bones","skeleton","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","_uniforms","penumbra","_shadow","_shadowUniforms","isRectAreaLight","_uniforms2","isPointLight","_uniforms3","_shadow2","_shadowUniforms2","isHemisphereLight","_uniforms4","LTC_1","LTC_2","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","kl","depthMaterial","_depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","_mipmap","mipmapImage","_j2","_mipmap2","uploadCubeTexture","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","_samples","_glInternalFormat","_samples2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","_inputSource","_controller","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","xrCompatible","makeXRCompatible","baseLayer","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","domElement","sortObjects","toneMappingExposure","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","projectObject","isGroup","isLOD","_geometry","_material","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","joints","inputState","pinching","XRHand","LITTLE_PHALANX_TIP","joint","inputPose","gripPose","handPose","targetRay","grip","hand","jointPose","getJointPose","jointRadius","indexTip","INDEX_PHALANX_TIP","thumbTip","THUMB_PHALANX_TIP","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","FogExp2","Fog","Scene","_Object3D","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","basePosition","skinIndex","skinWeight","_v1$4","_v2$2","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getCurrentLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","weight","boneIndex","boneInverses","_offsetMatrix","_identityMatrix","Skeleton","Bone","bone","_bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","setColorAt","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","_lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","_l2","_distance","nbVertices","_distance2","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","CompressedTexture","CanvasTexture","DepthTexture","readyState","HAVE_CURRENT_DATA","isCanvasTexture","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","addFace","areaWeighted","vl","_f","_fl","_face","_v","_vl","_fl2","_face2","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","_f3","_fl3","faceNormal","_f4","_fl4","_face3","_vertexNormals","_f5","_fl5","_face4","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","_i7","faceVertexNormals","faceVertexColors","faceCopy","_i8","_il5","faceVertexUvs2","_jl2","uvsCopy","mergeMesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","_i9","_il6","_i10","idx","diff","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","uvs1","_i11","vertex","normalsHash","colorsHash","uvsHash","_i12","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","_i13","_il7","_i14","_il8","_i15","_il9","_i16","_il10","_j3","_jl3","_j4","_jl4","_i17","_il11","_j5","_jl5","srcVertexNormal","destVertexNormal","_j6","_jl6","_i18","_il12","_i19","_il13","_i20","_il14","BoxGeometry","_Geometry","CircleBufferGeometry","segments","thetaStart","thetaLength","segment","CircleGeometry","CylinderBufferGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","_x2","cosTheta","sinTheta","_x3","slope","indexRow","generateTorso","CylinderGeometry","ConeGeometry","_CylinderGeometry","ConeBufferGeometry","_CylinderBufferGeomet","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","DodecahedronBufferGeometry","_PolyhedronBufferGeom","DodecahedronGeometry","_v0$2","_v1$5","_normal$1","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeBufferGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","hl","ahole","_h","_hl","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","_h2","_hl2","_ahole2","_k","_bs","vert","_h3","_hl3","_ahole3","_vert","bs","_vert2","binormals","_vert3","_t","_bs2","_vert4","_h4","_hl4","_ahole4","_vert5","sidewalls","layeroffset","_k2","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","_h5","_hl5","_ahole5","buildSideFaces","_toJSON","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","ExtrudeGeometry","_toJSON$1","IcosahedronBufferGeometry","IcosahedronGeometry","LatheBufferGeometry","phiStart","phiLength","inverseSegments","base","n1","n2","_base","LatheGeometry","OctahedronBufferGeometry","OctahedronGeometry","ParametricBufferGeometry","slices","stacks","pu","pv","sliceCount","ParametricGeometry","PlaneGeometry","PolyhedronGeometry","RingBufferGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","_segment","RingGeometry","ShapeBufferGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","_l3","_toJSON$2","ShapeGeometry","_toJSON$3","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","SphereGeometry","TetrahedronBufferGeometry","TetrahedronGeometry","TextBufferGeometry","_ExtrudeBufferGeometr","text","font","isFont","generateShapes","TextGeometry","TorusBufferGeometry","tube","tubularSegments","arc","TorusGeometry","TorusKnotBufferGeometry","P1","P2","B","calculatePositionOnCurve","cu","su","quOverP","cs","TorusKnotGeometry","heightScale","TubeBufferGeometry","closed","frames","tangents","P","generateSegment","getPointAt","generateIndices","generateBufferData","TubeGeometry","taper","bufferGeometry","WireframeGeometry","edge","edges","edge1","edge2","_vertex","ol","_edge","_key3","_e","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","_startIndex","interpolant","_startIndex2","_endIndex2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","parseKeyframeTrack","json","trackType","typeName","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","_giveUpAt","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_readOffset","_writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","_m","animationKey","boneName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","ImageLoader","CubeTextureLoader","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","_callback","overrideMimeType","send","setResponseType","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","onImageLoad","onImageError","urls","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","_theta","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","TYPED_ARRAYS","typedArray","bufferAttribute","_typedArray","_bufferAttribute","drawcalls","offsets","ObjectLoader","_Loader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","geometryShapes","bufferGeometryLoader","details","loadImage","currentUrl","_path","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","child","setTexturePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","isImageBitmapLoader","setOptions","fetchOptions","credentials","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","_tmpPath","_tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","_sIdx","_sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","_Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","subTreeNode","searchNodeSubtree","childNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","_lastIndex","_lastObject","_m2","_bindingsForPath","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","_intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObject","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$7","Box2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","_LineSegments","getBoneList","boneList","isSkeletonHelper","PointLightHelper","_Mesh","sphereSize","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_color","_v1$6","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_lineGeometry","_coneGeometry","_ENCODINGS","_box$3","BoxHelper","Box3Helper","PlaneHelper","_Line","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","_flatCamera","_createPlanes2","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","cubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","define","amd","globalThis","THREE","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","lum","rgb","_create_rock","asteroidTexture","asteroids","_color_luminance","spreadX","maxDepth","centeredness","fill","spotlight","_create_asteroids","_interopRequireDefault","_create_spotlights","SCREEN_WIDTH","SCREEN_HEIGHT","controls","earthTexture","earthMaterial","earthGeometry","earthMesh","pointCloud","[object Object]","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(10000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","// threejs.org/license\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\tif (Number.EPSILON === undefined) {\n\t\tNumber.EPSILON = Math.pow(2, -52);\n\t}\n\n\tif (Number.isInteger === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\t\tNumber.isInteger = function (value) {\n\t\t\treturn typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\t} //\n\n\n\tif (Math.sign === undefined) {\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\tMath.sign = function (x) {\n\t\t\treturn x < 0 ? -1 : x > 0 ? 1 : +x;\n\t\t};\n\t}\n\n\tif ('name' in Function.prototype === false) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\tObject.defineProperty(Function.prototype, 'name', {\n\t\t\tget: function get() {\n\t\t\t\treturn this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];\n\t\t\t}\n\t\t});\n\t}\n\n\tif (Object.assign === undefined) {\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\tObject.assign = function (target) {\n\n\t\t\tif (target === undefined || target === null) {\n\t\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t\t}\n\n\t\t\tvar output = Object(target);\n\n\t\t\tfor (var index = 1; index < arguments.length; index++) {\n\t\t\t\tvar source = arguments[index];\n\n\t\t\t\tif (source !== undefined && source !== null) {\n\t\t\t\t\tfor (var nextKey in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n\t\t\t\t\t\t\toutput[nextKey] = source[nextKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn output;\n\t\t};\n\t}\n\n\tvar REVISION = '121';\n\tvar MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tvar TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\tvar GLSL1 = \"100\";\n\tvar GLSL3 = \"300 es\";\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function addEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function hasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tvar listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function removeEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tvar index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tvar array = listenerArray.slice(0);\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _lut = [];\n\n\tfor (var i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tvar _seed = 1234567;\n\tvar MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function generateUUID() {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function clamp(value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function euclideanModulo(n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function mapLinear(x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function lerp(x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function smoothstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function smootherstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function randInt(low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function randFloat(low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function randFloatSpread(range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function seededRandom(s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function degToRad(degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function radToDeg(radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function isPowerOfTwo(value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function ceilPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function floorPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c2 = cos(b / 2);\n\t\t\tvar s2 = sin(b / 2);\n\t\t\tvar c13 = cos((a + c) / 2);\n\t\t\tvar s13 = sin((a + c) / 2);\n\t\t\tvar c1_3 = cos((a - c) / 2);\n\t\t\tvar s1_3 = sin((a - c) / 2);\n\t\t\tvar c3_1 = cos((c - a) / 2);\n\t\t\tvar s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];\n\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\tdescriptor.configurable = true;\n\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t\tif (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t\tif (staticProps) _defineProperties(Constructor, staticProps);\n\t\treturn Constructor;\n\t}\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t\tsubClass.prototype = Object.create(superClass.prototype);\n\t\tsubClass.prototype.constructor = subClass;\n\t\tsubClass.__proto__ = superClass;\n\t}\n\n\tfunction _assertThisInitialized(self) {\n\t\tif (self === void 0) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn self;\n\t}\n\n\tvar Vector2 = /*#__PURE__*/function () {\n\t\tfunction Vector2(x, y) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tvar _proto = Vector2.prototype;\n\n\t\t_proto.set = function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t};\n\n\t\t_proto.cross = function cross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.angle = function angle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tvar angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotateAround = function rotateAround(center, angle) {\n\t\t\tvar c = Math.cos(angle),\n\t\t\t\t\ts = Math.sin(angle);\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector2, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.x = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.y = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector2;\n\t}();\n\n\tvar Matrix3 = /*#__PURE__*/function () {\n\t\tfunction Matrix3() {\n\t\t\tObject.defineProperty(this, 'isMatrix3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix3.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix4 = function setFromMatrix4(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\ta13 = ae[6];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\ta23 = ae[7];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\ta33 = ae[8];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[3],\n\t\t\t\t\tb13 = be[6];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[4],\n\t\t\t\t\tb23 = be[7];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[5],\n\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar a = te[0],\n\t\t\t\t\tb = te[1],\n\t\t\t\t\tc = te[2],\n\t\t\t\t\td = te[3],\n\t\t\t\t\te = te[4],\n\t\t\t\t\tf = te[5],\n\t\t\t\t\tg = te[6],\n\t\t\t\t\th = te[7],\n\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t};\n\n\t\t_proto.getInverse = function getInverse(matrix, throwOnDegenerate) {\n\t\t\tif (throwOnDegenerate !== undefined) {\n\t\t\t\tconsole.warn(\"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\");\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\t\tte = this.elements,\n\t\t\t\t\tn11 = me[0],\n\t\t\t\t\tn21 = me[1],\n\t\t\t\t\tn31 = me[2],\n\t\t\t\t\tn12 = me[3],\n\t\t\t\t\tn22 = me[4],\n\t\t\t\t\tn32 = me[5],\n\t\t\t\t\tn13 = me[6],\n\t\t\t\t\tn23 = me[7],\n\t\t\t\t\tn33 = me[8],\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getNormalMatrix = function getNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).getInverse(this).transpose();\n\t\t};\n\n\t\t_proto.transposeIntoArray = function transposeIntoArray(r) {\n\t\t\tvar m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setUvTransform = function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tvar c = Math.cos(rotation);\n\t\t\tvar s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t};\n\n\t\t_proto.scale = function scale(sx, sy) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotate = function rotate(theta) {\n\t\t\tvar c = Math.cos(theta);\n\t\t\tvar s = Math.sin(theta);\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = te[0],\n\t\t\t\t\ta12 = te[3],\n\t\t\t\t\ta13 = te[6];\n\t\t\tvar a21 = te[1],\n\t\t\t\t\ta22 = te[4],\n\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(tx, ty) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix3;\n\t}();\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\t\tgetDataURL: function getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tvar textureId = 0;\n\n\tfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: textureId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\t\tthis.offset = new Vector2(0, 0);\n\t\tthis.repeat = new Vector2(1, 1);\n\t\tthis.center = new Vector2(0, 0);\n\t\tthis.rotation = 0;\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Texture,\n\t\tisTexture: true,\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (var i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\turl.push(ImageUtils.getDataURL(image[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = ImageUtils.getDataURL(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t},\n\t\ttransformUv: function transformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\t});\n\tObject.defineProperty(Texture.prototype, \"needsUpdate\", {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tvar Vector4 = /*#__PURE__*/function () {\n\t\tfunction Vector4(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tvar _proto = Vector4.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setW = function setW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z,\n\t\t\t\t\tw = this.w;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tvar s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar angle, x, y, z; // variables for result\n\n\t\t\tvar epsilon = 0.01,\n\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tvar xx = (m11 + 1) / 2;\n\t\t\t\tvar yy = (m22 + 1) / 2;\n\t\t\t\tvar zz = (m33 + 1) / 2;\n\t\t\t\tvar xy = (m12 + m21) / 4;\n\t\t\t\tvar xz = (m13 + m31) / 4;\n\t\t\t\tvar yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tvar s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector4, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.z = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.w = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector4;\n\t}();\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tfunction WebGLRenderTarget(width, height, options) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\tthis.scissorTest = false;\n\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\toptions = options || {};\n\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: WebGLRenderTarget,\n\t\tisWebGLRenderTarget: true,\n\t\tsetSize: function setSize(width, height) {\n\t\t\tif (this.width !== width || this.height !== height) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction WebGLMultisampleRenderTarget(width, height, options) {\n\t\tWebGLRenderTarget.call(this, width, height, options);\n\t\tthis.samples = 4;\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\t\tisWebGLMultisampleRenderTarget: true,\n\t\tcopy: function copy(source) {\n\t\t\tWebGLRenderTarget.prototype.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar Quaternion = /*#__PURE__*/function () {\n\t\tfunction Quaternion(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isQuaternion', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tQuaternion.slerp = function slerp(qa, qb, qm, t) {\n\t\t\treturn qm.copy(qa).slerp(qb, t);\n\t\t};\n\n\t\tQuaternion.slerpFlat = function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tvar x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1 + 0],\n\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tvar sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tvar f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t};\n\n\t\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tvar x0 = src0[srcOffset0];\n\t\t\tvar y0 = src0[srcOffset0 + 1];\n\t\t\tvar z0 = src0[srcOffset0 + 2];\n\t\t\tvar w0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1];\n\t\t\tvar y1 = src1[srcOffset1 + 1];\n\t\t\tvar z1 = src1[srcOffset1 + 2];\n\t\t\tvar w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t};\n\n\t\tvar _proto = Quaternion.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t};\n\n\t\t_proto.copy = function copy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromEuler = function setFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar x = euler._x,\n\t\t\t\t\ty = euler._y,\n\t\t\t\t\tz = euler._z,\n\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c1 = cos(x / 2);\n\t\t\tvar c2 = cos(y / 2);\n\t\t\tvar c3 = cos(z / 2);\n\t\t\tvar s1 = sin(x / 2);\n\t\t\tvar s2 = sin(y / 2);\n\t\t\tvar s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromAxisAngle = function setFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tvar halfAngle = angle / 2,\n\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar te = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10],\n\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tvar s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tvar _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\t\t\tthis._w = (m32 - m23) / _s;\n\t\t\t\tthis._x = 0.25 * _s;\n\t\t\t\tthis._y = (m12 + m21) / _s;\n\t\t\t\tthis._z = (m13 + m31) / _s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tvar _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\t\t\tthis._w = (m13 - m31) / _s2;\n\t\t\t\tthis._x = (m12 + m21) / _s2;\n\t\t\t\tthis._y = 0.25 * _s2;\n\t\t\t\tthis._z = (m23 + m32) / _s2;\n\t\t\t} else {\n\t\t\t\tvar _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\t\t\tthis._w = (m21 - m12) / _s3;\n\t\t\t\tthis._x = (m13 + m31) / _s3;\n\t\t\t\tthis._y = (m23 + m32) / _s3;\n\t\t\t\tthis._z = 0.25 * _s3;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromUnitVectors = function setFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tvar EPS = 0.000001;\n\t\t\tvar r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < EPS) {\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t};\n\n\t\t_proto.rotateTowards = function rotateTowards(q, step) {\n\t\t\tvar angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tvar t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t};\n\n\t\t_proto.inverse = function inverse() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t};\n\n\t\t_proto.conjugate = function conjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\tvar l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t};\n\n\t\t_proto.multiplyQuaternions = function multiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tvar qax = a._x,\n\t\t\t\t\tqay = a._y,\n\t\t\t\t\tqaz = a._z,\n\t\t\t\t\tqaw = a._w;\n\t\t\tvar qbx = b._x,\n\t\t\t\t\tqby = b._y,\n\t\t\t\t\tqbz = b._z,\n\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.slerp = function slerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tvar x = this._x,\n\t\t\t\t\ty = this._y,\n\t\t\t\t\tz = this._z,\n\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tvar halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tvar ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Quaternion, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"w\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._w = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Quaternion;\n\t}();\n\n\tvar Vector3 = /*#__PURE__*/function () {\n\t\tfunction Vector3(x, y, z) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isVector3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tvar _proto = Vector3.prototype;\n\n\t\t_proto.set = function set(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyVectors = function multiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyEuler = function applyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion.setFromEuler(euler));\n\t\t};\n\n\t\t_proto.applyAxisAngle = function applyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyNormalMatrix = function applyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyQuaternion = function applyQuaternion(q) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar qx = q.x,\n\t\t\t\t\tqy = q.y,\n\t\t\t\t\tqz = q.z,\n\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.project = function project(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t};\n\n\t\t_proto.unproject = function unproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t};\n\n\t\t_proto.transformDirection = function transformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\t\t;\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.cross = function cross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t};\n\n\t\t_proto.crossVectors = function crossVectors(a, b) {\n\t\t\tvar ax = a.x,\n\t\t\t\t\tay = a.y,\n\t\t\t\t\taz = a.z;\n\t\t\tvar bx = b.x,\n\t\t\t\t\tby = b.y,\n\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.projectOnVector = function projectOnVector(v) {\n\t\t\tvar denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tvar scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t};\n\n\t\t_proto.projectOnPlane = function projectOnPlane(planeNormal) {\n\t\t\t_vector.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector);\n\t\t};\n\n\t\t_proto.reflect = function reflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(v) {\n\t\t\tvar denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tvar theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t};\n\n\t\t_proto.setFromSpherical = function setFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t};\n\n\t\t_proto.setFromSphericalCoords = function setFromSphericalCoords(radius, phi, theta) {\n\t\t\tvar sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCylindrical = function setFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t};\n\n\t\t_proto.setFromCylindricalCoords = function setFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixPosition = function setFromMatrixPosition(m) {\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixScale = function setFromMatrixScale(m) {\n\t\t\tvar sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tvar sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tvar sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixColumn = function setFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t};\n\n\t\t_proto.setFromMatrix3Column = function setFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Vector3;\n\t}();\n\n\tvar _vector = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion = /*@__PURE__*/new Quaternion();\n\n\tvar Box3 = /*#__PURE__*/function () {\n\t\tfunction Box3(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box3.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromArray = function setFromArray(array) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tvar x = array[i];\n\t\t\t\tvar y = array[i + 1];\n\t\t\t\tvar z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromBufferAttribute = function setFromBufferAttribute(attribute) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tvar x = attribute.getX(i);\n\t\t\t\tvar y = attribute.getY(i);\n\t\t\t\tvar z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$1.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByObject = function expandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box.copy(geometry.boundingBox);\n\n\t\t\t\t_box.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box);\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$1); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tvar min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t};\n\n\t\t_proto.intersectsTriangle = function intersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0.subVectors(triangle.a, _center);\n\n\t\t\t_v1.subVectors(triangle.b, _center);\n\n\t\t\t_v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1, _v0);\n\n\t\t\t_f1.subVectors(_v2, _v1);\n\n\t\t\t_f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tvar axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0, _v1, _v2, _extents);\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.getBoundingSphere = function getBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$1).length() * 0.5;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box3;\n\t}();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tvar r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tvar p0 = v0.dot(_testAxis);\n\t\t\tvar p1 = v1.dot(_testAxis);\n\t\t\tvar p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tvar _vector$1 = /*@__PURE__*/new Vector3();\n\n\tvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tvar _v0 = /*@__PURE__*/new Vector3();\n\n\tvar _v1 = /*@__PURE__*/new Vector3();\n\n\tvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tvar _f0 = /*@__PURE__*/new Vector3();\n\n\tvar _f1 = /*@__PURE__*/new Vector3();\n\n\tvar _f2 = /*@__PURE__*/new Vector3();\n\n\tvar _center = /*@__PURE__*/new Vector3();\n\n\tvar _extents = /*@__PURE__*/new Vector3();\n\n\tvar _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tvar _testAxis = /*@__PURE__*/new Vector3();\n\n\tvar _box$1 = /*@__PURE__*/new Box3();\n\n\tvar Sphere = /*#__PURE__*/function () {\n\t\tfunction Sphere(center, radius) {\n\t\t\tthis.center = center !== undefined ? center : new Vector3();\n\t\t\tthis.radius = radius !== undefined ? radius : -1;\n\t\t}\n\n\t\tvar _proto = Sphere.prototype;\n\n\t\t_proto.set = function set(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points, optionalCenter) {\n\t\t\tvar center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$1.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getBoundingBox = function getBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t};\n\n\t\treturn Sphere;\n\t}();\n\n\tvar _vector$2 = /*@__PURE__*/new Vector3();\n\n\tvar _segCenter = /*@__PURE__*/new Vector3();\n\n\tvar _segDir = /*@__PURE__*/new Vector3();\n\n\tvar _diff = /*@__PURE__*/new Vector3();\n\n\tvar _edge1 = /*@__PURE__*/new Vector3();\n\n\tvar _edge2 = /*@__PURE__*/new Vector3();\n\n\tvar _normal = /*@__PURE__*/new Vector3();\n\n\tvar Ray = /*#__PURE__*/function () {\n\t\tfunction Ray(origin, direction) {\n\t\t\tthis.origin = origin !== undefined ? origin : new Vector3();\n\t\t\tthis.direction = direction !== undefined ? direction : new Vector3(0, 0, -1);\n\t\t}\n\n\t\tvar _proto = Ray.prototype;\n\n\t\t_proto.set = function set(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.recast = function recast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$2));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tvar directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t};\n\n\t\t_proto.distanceSqToPoint = function distanceSqToPoint(point) {\n\t\t\tvar directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$2.distanceToSquared(point);\n\t\t};\n\n\t\t_proto.distanceSqToSegment = function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tvar segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tvar a01 = -this.direction.dot(_segDir);\n\n\t\t\tvar b0 = _diff.dot(this.direction);\n\n\t\t\tvar b1 = -_diff.dot(_segDir);\n\n\t\t\tvar c = _diff.lengthSq();\n\n\t\t\tvar det = Math.abs(1 - a01 * a01);\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t};\n\n\t\t_proto.intersectSphere = function intersectSphere(sphere, target) {\n\t\t\t_vector$2.subVectors(sphere.center, this.origin);\n\n\t\t\tvar tca = _vector$2.dot(this.direction);\n\n\t\t\tvar d2 = _vector$2.dot(_vector$2) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tvar thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tvar t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tvar t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.distanceToPlane = function distanceToPlane(plane) {\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t};\n\n\t\t_proto.intersectPlane = function intersectPlane(plane, target) {\n\t\t\tvar t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tvar distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t};\n\n\t\t_proto.intersectBox = function intersectBox(box, target) {\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tvar origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$2) !== null;\n\t\t};\n\n\t\t_proto.intersectTriangle = function intersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tvar DdN = this.direction.dot(_normal);\n\t\t\tvar sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tvar DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tvar QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t};\n\n\t\treturn Ray;\n\t}();\n\n\tvar Matrix4 = /*#__PURE__*/function () {\n\t\tfunction Matrix4() {\n\t\t\tObject.defineProperty(this, 'isMatrix4', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix4.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyPosition = function copyPosition(m) {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeBasis = function makeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractRotation = function extractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();\n\n\t\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();\n\n\t\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromEuler = function makeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = euler.x,\n\t\t\t\t\ty = euler.y,\n\t\t\t\t\tz = euler.z;\n\t\t\tvar a = Math.cos(x),\n\t\t\t\t\tb = Math.sin(x);\n\t\t\tvar c = Math.cos(y),\n\t\t\t\t\td = Math.sin(y);\n\t\t\tvar e = Math.cos(z),\n\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tvar ae = a * e,\n\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tvar ce = c * e,\n\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tvar _ce = c * e,\n\t\t\t\t\t\t_cf = c * f,\n\t\t\t\t\t\t_de = d * e,\n\t\t\t\t\t\t_df = d * f;\n\n\t\t\t\tte[0] = _ce - _df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = _de + _cf * b;\n\t\t\t\tte[1] = _cf + _de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _df - _ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tvar _ae = a * e,\n\t\t\t\t\t\t_af = a * f,\n\t\t\t\t\t\t_be = b * e,\n\t\t\t\t\t\t_bf = b * f;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = _be * d - _af;\n\t\t\t\tte[8] = _ae * d + _bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = _bf * d + _ae;\n\t\t\t\tte[9] = _af * d - _be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tvar ac = a * c,\n\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tvar _ac = a * c,\n\t\t\t\t\t\t_ad = a * d,\n\t\t\t\t\t\t_bc = b * c,\n\t\t\t\t\t\t_bd = b * d;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = _ac * f + _bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _ad * f - _bc;\n\t\t\t\tte[2] = _bc * f - _ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = _bd * f + _ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromQuaternion = function makeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(eye, target, up) {\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\ta14 = ae[12];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\ta24 = ae[13];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\ta34 = ae[14];\n\t\t\tvar a41 = ae[3],\n\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\ta44 = ae[15];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[4],\n\t\t\t\t\tb13 = be[8],\n\t\t\t\t\tb14 = be[12];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[5],\n\t\t\t\t\tb23 = be[9],\n\t\t\t\t\tb24 = be[13];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[6],\n\t\t\t\t\tb33 = be[10],\n\t\t\t\t\tb34 = be[14];\n\t\t\tvar b41 = be[3],\n\t\t\t\t\tb42 = be[7],\n\t\t\t\t\tb43 = be[11],\n\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar n11 = te[0],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn14 = te[12];\n\t\t\tvar n21 = te[1],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn24 = te[13];\n\t\t\tvar n31 = te[2],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn34 = te[14];\n\t\t\tvar n41 = te[3],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setPosition = function setPosition(x, y, z) {\n\t\t\tvar te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getInverse = function getInverse(m, throwOnDegenerate) {\n\t\t\tif (throwOnDegenerate !== undefined) {\n\t\t\t\tconsole.warn(\"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\");\n\t\t\t} // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\n\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements,\n\t\t\t\t\tn11 = me[0],\n\t\t\t\t\tn21 = me[1],\n\t\t\t\t\tn31 = me[2],\n\t\t\t\t\tn41 = me[3],\n\t\t\t\t\tn12 = me[4],\n\t\t\t\t\tn22 = me[5],\n\t\t\t\t\tn32 = me[6],\n\t\t\t\t\tn42 = me[7],\n\t\t\t\t\tn13 = me[8],\n\t\t\t\t\tn23 = me[9],\n\t\t\t\t\tn33 = me[10],\n\t\t\t\t\tn43 = me[11],\n\t\t\t\t\tn14 = me[12],\n\t\t\t\t\tn24 = me[13],\n\t\t\t\t\tn34 = me[14],\n\t\t\t\t\tn44 = me[15],\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(v) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x,\n\t\t\t\t\ty = v.y,\n\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxScaleOnAxis = function getMaxScaleOnAxis() {\n\t\t\tvar te = this.elements;\n\t\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t};\n\n\t\t_proto.makeTranslation = function makeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationX = function makeRotationX(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationY = function makeRotationY(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationZ = function makeRotationZ(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationAxis = function makeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tvar c = Math.cos(angle);\n\t\t\tvar s = Math.sin(angle);\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x,\n\t\t\t\t\ty = axis.y,\n\t\t\t\t\tz = axis.z;\n\t\t\tvar tx = t * x,\n\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeScale = function makeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeShear = function makeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.compose = function compose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = quaternion._x,\n\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\tw = quaternion._w;\n\t\t\tvar x2 = x + x,\n\t\t\t\t\ty2 = y + y,\n\t\t\t\t\tz2 = z + z;\n\t\t\tvar xx = x * x2,\n\t\t\t\t\txy = x * y2,\n\t\t\t\t\txz = x * z2;\n\t\t\tvar yy = y * y2,\n\t\t\t\t\tyz = y * z2,\n\t\t\t\t\tzz = z * z2;\n\t\t\tvar wx = w * x2,\n\t\t\t\t\twy = w * y2,\n\t\t\t\t\twz = w * z2;\n\t\t\tvar sx = scale.x,\n\t\t\t\t\tsy = scale.y,\n\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.decompose = function decompose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1$1.set(te[0], te[1], te[2]).length();\n\n\t\t\tvar sy = _v1$1.set(te[4], te[5], te[6]).length();\n\n\t\t\tvar sz = _v1$1.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tvar det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1.copy(this);\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\t\t\t_m1.elements[0] *= invSX;\n\t\t\t_m1.elements[1] *= invSX;\n\t\t\t_m1.elements[2] *= invSX;\n\t\t\t_m1.elements[4] *= invSY;\n\t\t\t_m1.elements[5] *= invSY;\n\t\t\t_m1.elements[6] *= invSY;\n\t\t\t_m1.elements[8] *= invSZ;\n\t\t\t_m1.elements[9] *= invSZ;\n\t\t\t_m1.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makePerspective = function makePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / (right - left);\n\t\t\tvar y = 2 * near / (top - bottom);\n\t\t\tvar a = (right + left) / (right - left);\n\t\t\tvar b = (top + bottom) / (top - bottom);\n\t\t\tvar c = -(far + near) / (far - near);\n\t\t\tvar d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeOrthographic = function makeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / (right - left);\n\t\t\tvar h = 1.0 / (top - bottom);\n\t\t\tvar p = 1.0 / (far - near);\n\t\t\tvar x = (right + left) * w;\n\t\t\tvar y = (top + bottom) * h;\n\t\t\tvar z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix4;\n\t}();\n\n\tvar _v1$1 = /*@__PURE__*/new Vector3();\n\n\tvar _m1 = /*@__PURE__*/new Matrix4();\n\n\tvar _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tvar _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tvar _x = /*@__PURE__*/new Vector3();\n\n\tvar _y = /*@__PURE__*/new Vector3();\n\n\tvar _z = /*@__PURE__*/new Vector3();\n\n\tvar Euler = /*#__PURE__*/function () {\n\t\tfunction Euler(x, y, z, order) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (order === void 0) {\n\t\t\t\torder = Euler.DefaultOrder;\n\t\t\t}\n\n\t\t\tObject.defineProperty(this, 'isEuler', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tvar _proto = Euler.prototype;\n\n\t\t_proto.set = function set(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t};\n\n\t\t_proto.copy = function copy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m, order, update) {\n\t\t\tvar clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8];\n\t\t\tvar m21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9];\n\t\t\tvar m31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromQuaternion = function setFromQuaternion(q, order, update) {\n\t\t\t_matrix.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix, order, update);\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t};\n\n\t\t_proto.reorder = function reorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$1.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$1, newOrder);\n\t\t};\n\n\t\t_proto.equals = function equals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.toVector3 = function toVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Euler, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"order\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._order = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Euler;\n\t}();\n\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tvar _matrix = /*@__PURE__*/new Matrix4();\n\n\tvar _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tvar Layers = /*#__PURE__*/function () {\n\t\tfunction Layers() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tvar _proto = Layers.prototype;\n\n\t\t_proto.set = function set(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enable = function enable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enableAll = function enableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t};\n\n\t\t_proto.toggle = function toggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.disable = function disable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t};\n\n\t\t_proto.disableAll = function disableAll() {\n\t\t\tthis.mask = 0;\n\t\t};\n\n\t\t_proto.test = function test(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t};\n\n\t\treturn Layers;\n\t}();\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\n\tvar _q1 = new Quaternion();\n\n\tvar _m1$1 = new Matrix4();\n\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\n\tvar _scale = new Vector3();\n\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3(1, 0, 0);\n\n\tvar _yAxis = new Vector3(0, 1, 0);\n\n\tvar _zAxis = new Vector3(0, 0, 1);\n\n\tvar _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tvar _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function onBeforeRender() {},\n\t\tonAfterRender: function onAfterRender() {},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function applyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function setRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function setRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function rotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function rotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function translateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$2.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$2.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function translateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function translateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function translateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function localToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function worldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.getInverse(this.matrixWorld));\n\t\t},\n\t\tlookAt: function lookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.inverse());\n\t\t\t}\n\t\t},\n\t\tadd: function add(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error(\"THREE.Object3D.add: object can't be added as a child of itself.\", object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function remove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tattach: function attach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.getInverse(this.matrixWorld);\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function getObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function getObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function getObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tvar object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function getWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function getWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, target, _scale);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function getWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function raycast() {},\n\t\ttraverse: function traverse(callback) {\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function traverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function traverseAncestors(callback) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tvar output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tvar object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tvar shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor (var _i = 0, _l = this.material.length; _i < _l; _i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[_i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (var _i2 = 0; _i2 < this.children.length; _i2++) {\n\t\t\t\t\tobject.children.push(this.children[_i2].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tvar geometries = extractFromCache(meta.geometries);\n\t\t\t\tvar materials = extractFromCache(meta.materials);\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\n\t\t\t\tvar _shapes = extractFromCache(meta.shapes);\n\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (_shapes.length > 0) output.shapes = _shapes;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function clone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function copy(source, recursive) {\n\t\t\tif (recursive === undefined) recursive = true;\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (var i = 0; i < source.children.length; i++) {\n\t\t\t\t\tvar child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar _vector1 = /*@__PURE__*/new Vector3();\n\n\tvar _vector2 = /*@__PURE__*/new Vector3();\n\n\tvar _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tvar Plane = /*#__PURE__*/function () {\n\t\tfunction Plane(normal, constant) {\n\t\t\tObject.defineProperty(this, 'isPlane', {\n\t\t\t\tvalue: true\n\t\t\t}); // normal is assumed to be normalized\n\n\t\t\tthis.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);\n\t\t\tthis.constant = constant !== undefined ? constant : 0;\n\t\t}\n\n\t\tvar _proto = Plane.prototype;\n\n\t\t_proto.set = function set(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponents = function setComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCoplanarPoints = function setFromCoplanarPoints(a, b, c) {\n\t\t\tvar normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t};\n\n\t\t_proto.distanceToSphere = function distanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t};\n\n\t\t_proto.projectPoint = function projectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t};\n\n\t\t_proto.intersectLine = function intersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar direction = line.delta(_vector1);\n\t\t\tvar denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t};\n\n\t\t_proto.intersectsLine = function intersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tvar startSign = this.distanceToPoint(line.start);\n\t\t\tvar endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.coplanarPoint = function coplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tvar referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tvar normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t};\n\n\t\treturn Plane;\n\t}();\n\n\tvar _v0$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v1$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v3 = /*@__PURE__*/new Vector3();\n\n\tvar _vab = /*@__PURE__*/new Vector3();\n\n\tvar _vac = /*@__PURE__*/new Vector3();\n\n\tvar _vbc = /*@__PURE__*/new Vector3();\n\n\tvar _vap = /*@__PURE__*/new Vector3();\n\n\tvar _vbp = /*@__PURE__*/new Vector3();\n\n\tvar _vcp = /*@__PURE__*/new Vector3();\n\n\tvar Triangle = /*#__PURE__*/function () {\n\t\tfunction Triangle(a, b, c) {\n\t\t\tthis.a = a !== undefined ? a : new Vector3();\n\t\t\tthis.b = b !== undefined ? b : new Vector3();\n\t\t\tthis.c = c !== undefined ? c : new Vector3();\n\t\t}\n\n\t\tTriangle.getNormal = function getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tvar targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\t;\n\n\t\tTriangle.getBarycoord = function getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$1.subVectors(point, a);\n\n\t\t\tvar dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tvar dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tvar dot02 = _v0$1.dot(_v2$1);\n\n\t\t\tvar dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tvar dot12 = _v1$3.dot(_v2$1);\n\n\t\t\tvar denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tvar v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t};\n\n\t\tTriangle.containsPoint = function containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3);\n\t\t\treturn _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n\t\t};\n\n\t\tTriangle.getUV = function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3.x);\n\t\t\ttarget.addScaledVector(uv2, _v3.y);\n\t\t\ttarget.addScaledVector(uv3, _v3.z);\n\t\t\treturn target;\n\t\t};\n\n\t\tTriangle.isFrontFacing = function isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t};\n\n\t\tvar _proto = Triangle.prototype;\n\n\t\t_proto.set = function set(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPointsAndIndices = function setFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getArea = function getArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t};\n\n\t\t_proto.getMidpoint = function getMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t};\n\n\t\t_proto.getNormal = function getNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getPlane = function getPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.getBarycoord = function getBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getUV = function getUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.isFrontFacing = function isFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar a = this.a,\n\t\t\t\t\tb = this.b,\n\t\t\t\t\tc = this.c;\n\t\t\tvar v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tvar d1 = _vab.dot(_vap);\n\n\t\t\tvar d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tvar d3 = _vab.dot(_vbp);\n\n\t\t\tvar d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tvar d5 = _vab.dot(_vcp);\n\n\t\t\tvar d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tvar denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t};\n\n\t\t_proto.equals = function equals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t};\n\n\t\treturn Triangle;\n\t}();\n\n\tvar _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tvar _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tvar _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tvar Color = /*#__PURE__*/function () {\n\t\tfunction Color(r, g, b) {\n\t\t\tObject.defineProperty(this, 'isColor', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tvar _proto = Color.prototype;\n\n\t\t_proto.set = function set(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHex = function setHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setRGB = function setRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHSL = function setHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tvar p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tvar q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setStyle = function setStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[1];\n\t\t\t\tvar components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[5]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[5]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tvar s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tvar l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[5]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f0-9]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tvar hex = m[1];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setColorName = function setColorName(style) {\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t};\n\n\t\t_proto.copy = function copy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyGammaToLinear = function copyGammaToLinear(color, gammaFactor) {\n\t\t\tif (gammaFactor === undefined) gammaFactor = 2.0;\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToGamma = function copyLinearToGamma(color, gammaFactor) {\n\t\t\tif (gammaFactor === undefined) gammaFactor = 2.0;\n\t\t\tvar safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertGammaToLinear = function convertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToGamma = function convertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copySRGBToLinear = function copySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToSRGB = function copyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertSRGBToLinear = function convertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToSRGB = function convertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getHex = function getHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t};\n\n\t\t_proto.getHexString = function getHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t};\n\n\t\t_proto.getHSL = function getHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar r = this.r,\n\t\t\t\t\tg = this.g,\n\t\t\t\t\tb = this.b;\n\t\t\tvar max = Math.max(r, g, b);\n\t\t\tvar min = Math.min(r, g, b);\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tvar delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getStyle = function getStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t};\n\n\t\t_proto.offsetHSL = function offsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addColors = function addColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpHSL = function lerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tvar h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tvar s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tvar l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.getHex();\n\t\t};\n\n\t\treturn Color;\n\t}();\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\tvar Face3 = /*#__PURE__*/function () {\n\t\tfunction Face3(a, b, c, normal, color, materialIndex) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.normal = normal && normal.isVector3 ? normal : new Vector3();\n\t\t\tthis.vertexNormals = Array.isArray(normal) ? normal : [];\n\t\t\tthis.color = color && color.isColor ? color : new Color();\n\t\t\tthis.vertexColors = Array.isArray(color) ? color : [];\n\t\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\t}\n\n\t\tvar _proto = Face3.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\t\t\tthis.normal.copy(source.normal);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n\t\t\t\tthis.vertexNormals[i] = source.vertexNormals[i].clone();\n\t\t\t}\n\n\t\t\tfor (var _i = 0, _il = source.vertexColors.length; _i < _il; _i++) {\n\t\t\t\tthis.vertexColors[_i] = source.vertexColors[_i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Face3;\n\t}();\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function onBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function customProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function setValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (var key in values) {\n\t\t\t\tvar newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn(\"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\t\t\tif (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar _data = cache[key];\n\t\t\t\t\tdelete _data.metadata;\n\t\t\t\t\tvalues.push(_data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshBasicMaterial';\n\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create(Material.prototype);\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _vector$3 = new Vector3();\n\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (var i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function copyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function copyColorsArray(colors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tvar color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function copyVector2sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function copyVector3sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function copyVector4sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function applyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (var _i = 0, _l = this.count; _i < _l; _i++) {\n\t\t\t\t\t_vector$3.fromBufferAttribute(this, _i);\n\n\t\t\t\t\t_vector$3.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function applyNormalMatrix(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function transformDirection(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tvar DirectGeometry = /*#__PURE__*/function () {\n\t\tfunction DirectGeometry() {\n\t\t\tthis.vertices = [];\n\t\t\tthis.normals = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.uvs = [];\n\t\t\tthis.uvs2 = [];\n\t\t\tthis.groups = [];\n\t\t\tthis.morphTargets = {};\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = []; // this.lineDistances = [];\n\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // update flags\n\n\t\t\tthis.verticesNeedUpdate = false;\n\t\t\tthis.normalsNeedUpdate = false;\n\t\t\tthis.colorsNeedUpdate = false;\n\t\t\tthis.uvsNeedUpdate = false;\n\t\t\tthis.groupsNeedUpdate = false;\n\t\t}\n\n\t\tvar _proto = DirectGeometry.prototype;\n\n\t\t_proto.computeGroups = function computeGroups(geometry) {\n\t\t\tvar groups = [];\n\t\t\tvar group, i;\n\t\t\tvar materialIndex = undefined;\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tvar face = faces[i]; // materials\n\n\t\t\t\tif (face.materialIndex !== materialIndex) {\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif (group !== undefined) {\n\t\t\t\t\t\tgroup.count = i * 3 - group.start;\n\t\t\t\t\t\tgroups.push(group);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (group !== undefined) {\n\t\t\t\tgroup.count = i * 3 - group.start;\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\t\t};\n\n\t\t_proto.fromGeometry = function fromGeometry(geometry) {\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif (morphTargetsLength > 0) {\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor (var i = 0; i < morphTargetsLength; i++) {\n\t\t\t\t\tmorphTargetsPosition[i] = {\n\t\t\t\t\t\tname: morphTargets[i].name,\n\t\t\t\t\t\tdata: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif (morphNormalsLength > 0) {\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor (var _i = 0; _i < morphNormalsLength; _i++) {\n\t\t\t\t\tmorphTargetsNormal[_i] = {\n\t\t\t\t\t\tname: morphNormals[_i].name,\n\t\t\t\t\t\tdata: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\t\t} // skins\n\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length; //\n\n\t\t\tif (vertices.length > 0 && faces.length === 0) {\n\t\t\t\tconsole.error('THREE.DirectGeometry: Faceless geometries are not supported.');\n\t\t\t}\n\n\t\t\tfor (var _i2 = 0; _i2 < faces.length; _i2++) {\n\t\t\t\tvar face = faces[_i2];\n\t\t\t\tthis.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif (vertexNormals.length === 3) {\n\t\t\t\t\tthis.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n\t\t\t\t} else {\n\t\t\t\t\tvar normal = face.normal;\n\t\t\t\t\tthis.normals.push(normal, normal, normal);\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif (vertexColors.length === 3) {\n\t\t\t\t\tthis.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n\t\t\t\t} else {\n\t\t\t\t\tvar color = face.color;\n\t\t\t\t\tthis.colors.push(color, color, color);\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexUv === true) {\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[0][_i2];\n\n\t\t\t\t\tif (vertexUvs !== undefined) {\n\t\t\t\t\t\tthis.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', _i2);\n\t\t\t\t\t\tthis.uvs.push(new Vector2(), new Vector2(), new Vector2());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexUv2 === true) {\n\t\t\t\t\tvar _vertexUvs = faceVertexUvs[1][_i2];\n\n\t\t\t\t\tif (_vertexUvs !== undefined) {\n\t\t\t\t\t\tthis.uvs2.push(_vertexUvs[0], _vertexUvs[1], _vertexUvs[2]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', _i2);\n\t\t\t\t\t\tthis.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n\t\t\t\t\t}\n\t\t\t\t} // morphs\n\n\n\t\t\t\tfor (var j = 0; j < morphTargetsLength; j++) {\n\t\t\t\t\tvar morphTarget = morphTargets[j].vertices;\n\t\t\t\t\tmorphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n\t\t\t\t}\n\n\t\t\t\tfor (var _j = 0; _j < morphNormalsLength; _j++) {\n\t\t\t\t\tvar morphNormal = morphNormals[_j].vertexNormals[_i2];\n\n\t\t\t\t\tmorphTargetsNormal[_j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n\t\t\t\t} // skins\n\n\n\t\t\t\tif (hasSkinIndices) {\n\t\t\t\t\tthis.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n\t\t\t\t}\n\n\t\t\t\tif (hasSkinWeights) {\n\t\t\t\t\tthis.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.computeGroups(geometry);\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t}\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn DirectGeometry;\n\t}();\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tvar max = array[0];\n\n\t\tfor (var i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\n\tvar _obj = new Object3D();\n\n\tvar _offset = new Vector3();\n\n\tvar _box$2 = new Box3();\n\n\tvar _boxMorphTargets = new Box3();\n\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _bufferGeometryId += 2\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function getIndex() {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function setIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function getAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function setAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function deleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\taddGroup: function addGroup(start, count, materialIndex) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\t\t});\n\t\t},\n\t\tclearGroups: function clearGroups() {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function setDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$2.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$2.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$2.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$2.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$2.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromObject: function setFromObject(object) {\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (object.isPoints || object.isLine) {\n\t\t\t\tvar positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n\t\t\t\tvar colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n\t\t\t\tthis.setAttribute('position', positions.copyVector3sArray(geometry.vertices));\n\t\t\t\tthis.setAttribute('color', colors.copyColorsArray(geometry.colors));\n\n\t\t\t\tif (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n\t\t\t\t\tthis.setAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n\t\t\t\t}\n\n\t\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t\t}\n\n\t\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t\t}\n\t\t\t} else if (object.isMesh) {\n\t\t\t\tif (geometry && geometry.isGeometry) {\n\t\t\t\t\tthis.fromGeometry(geometry);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tvar position = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tupdateFromObject: function updateFromObject(object) {\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif (geometry.elementsNeedUpdate === true) {\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\t\t\t}\n\n\t\t\t\tif (direct === undefined) {\n\t\t\t\t\treturn this.fromGeometry(geometry);\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\t\t\tgeometry = direct;\n\t\t\t}\n\n\t\t\tif (geometry.verticesNeedUpdate === true) {\n\t\t\t\tvar attribute = this.attributes.position;\n\n\t\t\t\tif (attribute !== undefined) {\n\t\t\t\t\tattribute.copyVector3sArray(geometry.vertices);\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.normalsNeedUpdate === true) {\n\t\t\t\tvar _attribute = this.attributes.normal;\n\n\t\t\t\tif (_attribute !== undefined) {\n\t\t\t\t\t_attribute.copyVector3sArray(geometry.normals);\n\n\t\t\t\t\t_attribute.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.colorsNeedUpdate === true) {\n\t\t\t\tvar _attribute2 = this.attributes.color;\n\n\t\t\t\tif (_attribute2 !== undefined) {\n\t\t\t\t\t_attribute2.copyColorsArray(geometry.colors);\n\n\t\t\t\t\t_attribute2.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.uvsNeedUpdate) {\n\t\t\t\tvar _attribute3 = this.attributes.uv;\n\n\t\t\t\tif (_attribute3 !== undefined) {\n\t\t\t\t\t_attribute3.copyVector2sArray(geometry.uvs);\n\n\t\t\t\t\t_attribute3.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.lineDistancesNeedUpdate) {\n\t\t\t\tvar _attribute4 = this.attributes.lineDistance;\n\n\t\t\t\tif (_attribute4 !== undefined) {\n\t\t\t\t\t_attribute4.copyArray(geometry.lineDistances);\n\n\t\t\t\t\t_attribute4.needsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (geometry.groupsNeedUpdate) {\n\t\t\t\tgeometry.computeGroups(object.geometry);\n\t\t\t\tthis.groups = geometry.groups;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tfromGeometry: function fromGeometry(geometry) {\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);\n\t\t\treturn this.fromDirectGeometry(geometry.__directGeometry);\n\t\t},\n\t\tfromDirectGeometry: function fromDirectGeometry(geometry) {\n\t\t\tvar positions = new Float32Array(geometry.vertices.length * 3);\n\t\t\tthis.setAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n\t\t\tif (geometry.normals.length > 0) {\n\t\t\t\tvar normals = new Float32Array(geometry.normals.length * 3);\n\t\t\t\tthis.setAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n\t\t\t}\n\n\t\t\tif (geometry.colors.length > 0) {\n\t\t\t\tvar colors = new Float32Array(geometry.colors.length * 3);\n\t\t\t\tthis.setAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n\t\t\t}\n\n\t\t\tif (geometry.uvs.length > 0) {\n\t\t\t\tvar uvs = new Float32Array(geometry.uvs.length * 2);\n\t\t\t\tthis.setAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n\t\t\t}\n\n\t\t\tif (geometry.uvs2.length > 0) {\n\t\t\t\tvar uvs2 = new Float32Array(geometry.uvs2.length * 2);\n\t\t\t\tthis.setAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n\t\t\t} // groups\n\n\n\t\t\tthis.groups = geometry.groups; // morphs\n\n\t\t\tfor (var name in geometry.morphTargets) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[name];\n\n\t\t\t\tfor (var i = 0, l = morphTargets.length; i < l; i++) {\n\t\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\t\tvar attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n\t\t\t\t\tattribute.name = morphTarget.name;\n\t\t\t\t\tarray.push(attribute.copyVector3sArray(morphTarget.data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t} // skinning\n\n\n\t\t\tif (geometry.skinIndices.length > 0) {\n\t\t\t\tvar skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n\t\t\t\tthis.setAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n\t\t\t}\n\n\t\t\tif (geometry.skinWeights.length > 0) {\n\t\t\t\tvar skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n\t\t\t\tthis.setAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n\t\t\t} //\n\n\n\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t}\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$2.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.min, _box$2.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.max, _box$2.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor (var _i = 0, _il = position.count; _i < _il; _i++) {\n\t\t\t\t\t_vector$4.fromBufferAttribute(position, _i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tvar _morphAttribute = morphAttributesPosition[_i2];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute(_morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$4.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {// backwards compatibility\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals() {\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tvar normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (var i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(),\n\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tvar nA = new Vector3(),\n\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (var _i3 = 0, _il3 = index.count; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\tvar vA = index.getX(_i3 + 0);\n\t\t\t\t\t\tvar vB = index.getX(_i3 + 1);\n\t\t\t\t\t\tvar vC = index.getX(_i3 + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (var _i4 = 0, _il4 = positionAttribute.count; _i4 < _il4; _i4 += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, _i4 + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, _i4 + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, _i4 + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i4 + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i4 + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i4 + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function merge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tvar attribute1 = attributes[key];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\t\t\tvar attribute2 = geometry.attributes[key];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (var i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function normalizeNormals() {\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor (var i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$4.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function toNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\t\t\t\tvar array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tvar index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (var i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (var j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes; // attributes\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tvar newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tvar _attribute5 = morphAttribute[i];\n\n\t\t\t\t\tvar _newAttribute = convertBufferAttribute(_attribute5, indices);\n\n\t\t\t\t\tmorphArray.push(_newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[_name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor (var _i5 = 0, l = groups.length; _i5 < l; _i5++) {\n\t\t\t\tvar group = groups[_i5];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tvar index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var _key in attributes) {\n\t\t\t\tvar attribute = attributes[_key];\n\t\t\t\tvar attributeData = attribute.toJSON(data.data);\n\t\t\t\tif (attribute.name !== '') attributeData.name = attribute.name;\n\t\t\t\tdata.data.attributes[_key] = attributeData;\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor (var _key2 in this.morphAttributes) {\n\t\t\t\tvar attributeArray = this.morphAttributes[_key2];\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tvar _attribute6 = attributeArray[i];\n\n\t\t\t\t\tvar _attributeData = _attribute6.toJSON(data.data);\n\n\t\t\t\t\tif (_attribute6.name !== '') _attributeData.name = _attribute6.name;\n\t\t\t\t\tarray.push(_attributeData);\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[_key2] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tvar data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor (var _name2 in morphAttributes) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[_name2] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor (var _i6 = 0, _l = groups.length; _i6 < _l; _i6++) {\n\t\t\t\tvar group = groups[_i6];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar _inverseMatrix = new Matrix4();\n\n\tvar _ray = new Ray();\n\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\n\tvar _vB = new Vector3();\n\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\n\tvar _tempB = new Vector3();\n\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\n\tvar _morphB = new Vector3();\n\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\n\tvar _uvB = new Vector2();\n\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry, material) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.getInverse(matrixWorld);\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tvar a = index.getX(j);\n\t\t\t\t\t\t\t\tvar b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tvar c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i = _start, _il = _end; _i < _il; _i += 3) {\n\t\t\t\t\t\t\tvar _a = index.getX(_i);\n\n\t\t\t\t\t\t\tvar _b = index.getX(_i + 1);\n\n\t\t\t\t\t\t\tvar _c = index.getX(_i + 2);\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\t\tvar _group = groups[_i2];\n\t\t\t\t\t\t\tvar _groupMaterial = material[_group.materialIndex];\n\n\t\t\t\t\t\t\tvar _start2 = Math.max(_group.start, drawRange.start);\n\n\t\t\t\t\t\t\tvar _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n\t\t\t\t\t\t\t\tvar _a2 = _j;\n\n\t\t\t\t\t\t\t\tvar _b2 = _j + 1;\n\n\t\t\t\t\t\t\t\tvar _c2 = _j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = _group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start3 = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\t\tvar _a3 = _i3;\n\n\t\t\t\t\t\t\tvar _b3 = _i3 + 1;\n\n\t\t\t\t\t\t\tvar _c3 = _i3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar isMultiMaterial = Array.isArray(material);\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[0];\n\t\t\t\tif (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n\t\t\t\tfor (var f = 0, fl = faces.length; f < fl; f++) {\n\t\t\t\t\tvar face = faces[f];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;\n\t\t\t\t\tif (faceMaterial === undefined) continue;\n\t\t\t\t\tvar fvA = vertices[face.a];\n\t\t\t\t\tvar fvB = vertices[face.b];\n\t\t\t\t\tvar fvC = vertices[face.c];\n\t\t\t\t\tintersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);\n\n\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\tif (uvs && uvs[f]) {\n\t\t\t\t\t\t\tvar uvs_f = uvs[f];\n\n\t\t\t\t\t\t\t_uvA.copy(uvs_f[0]);\n\n\t\t\t\t\t\t\t_uvB.copy(uvs_f[1]);\n\n\t\t\t\t\t\t\t_uvC.copy(uvs_f[2]);\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tvar intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA.fromBufferAttribute(position, a);\n\n\t\t_vB.fromBufferAttribute(position, b);\n\n\t\t_vC.fromBufferAttribute(position, c);\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (var i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tvar influence = morphInfluences[i];\n\t\t\t\tvar morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA.add(_morphA);\n\n\t\t\t_vB.add(_morphB);\n\n\t\t\t_vC.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA);\n\t\t\tobject.boneTransform(b, _vB);\n\t\t\tobject.boneTransform(c, _vC);\n\t\t}\n\n\t\tvar intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tvar face = new Face3(a, b, c);\n\t\t\tTriangle.getNormal(_vA, _vB, _vC, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tvar BoxBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(BoxBufferGeometry, _BufferGeometry);\n\n\t\tfunction BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (depthSegments === void 0) {\n\t\t\t\tdepthSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'BoxBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this); // segments\n\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\t\tvar a = numberOfVertices + _ix + gridX1 * _iy;\n\t\t\t\t\t\tvar b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tvar dst = {};\n\n\t\tfor (var u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (var p in src[u]) {\n\t\t\t\tvar property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tvar merged = {};\n\n\t\tfor (var u = 0; u < uniforms.length; u++) {\n\t\t\tvar tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (var p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tvar UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tvar data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (var name in this.uniforms) {\n\t\t\tvar uniform = this.uniforms[name];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tvar extensions = {};\n\n\t\tfor (var key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld(true);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.getInverse(this.matrixWorld);\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.getInverse(this.matrixWorld);\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov, aspect, near, far) {\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function setFocalLength(focalLength) {\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function getFocalLength() {\n\t\t\tvar vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function getEffectiveFOV() {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function getFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function getFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = -0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.getInverse(this.projectionMatrix);\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar fov = 90,\n\t\t\taspect = 1;\n\n\tfunction CubeCamera(near, far, renderTarget) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'CubeCamera';\n\n\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\t\tvar cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set(0, -1, 0);\n\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\tthis.add(cameraPX);\n\t\tvar cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set(0, -1, 0);\n\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\tthis.add(cameraNX);\n\t\tvar cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set(0, 0, 1);\n\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\tthis.add(cameraPY);\n\t\tvar cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set(0, 0, -1);\n\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\tthis.add(cameraNY);\n\t\tvar cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set(0, -1, 0);\n\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\tthis.add(cameraPZ);\n\t\tvar cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set(0, -1, 0);\n\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\tthis.add(cameraNZ);\n\n\t\tthis.update = function (renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t};\n\n\t\tthis.clear = function (renderer, color, depth, stencil) {\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(renderTarget, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t};\n\t}\n\n\tCubeCamera.prototype = Object.create(Object3D.prototype);\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\tfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\t\tTexture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.flipY = false;\n\t\tthis._needsFlipEnvMap = true;\n\t}\n\n\tCubeTexture.prototype = Object.create(Texture.prototype);\n\tCubeTexture.prototype.constructor = CubeTexture;\n\tCubeTexture.prototype.isCubeTexture = true;\n\tObject.defineProperty(CubeTexture.prototype, 'images', {\n\t\tget: function get() {\n\t\t\treturn this.image;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tthis.image = value;\n\t\t}\n\t});\n\n\tfunction WebGLCubeRenderTarget(size, options, dummy) {\n\t\tif (Number.isInteger(options)) {\n\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\toptions = dummy;\n\t\t}\n\n\t\tWebGLRenderTarget.call(this, size, size, options);\n\t\toptions = options || {};\n\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\tthis.texture._needsFlipEnvMap = false;\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype);\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function (renderer, texture) {\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\tthis.texture.encoding = texture.encoding;\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\t\tvar shader = {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t}\\n\\t\\t\"\n\t\t};\n\t\tvar geometry = new BoxBufferGeometry(5, 5, 5);\n\t\tvar material = new ShaderMaterial({\n\t\t\tname: 'CubemapFromEquirect',\n\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\t\t});\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\tvar mesh = new Mesh(geometry, material);\n\t\tvar currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\tvar camera = new CubeCamera(1, 10, this);\n\t\tcamera.update(renderer, mesh);\n\t\ttexture.minFilter = currentMinFilter;\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\t\treturn this;\n\t};\n\n\tfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\tdata: data || null,\n\t\t\twidth: width || 1,\n\t\t\theight: height || 1\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture.prototype = Object.create(Texture.prototype);\n\tDataTexture.prototype.constructor = DataTexture;\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tvar _vector$5 = /*@__PURE__*/new Vector3();\n\n\tvar Frustum = /*#__PURE__*/function () {\n\t\tfunction Frustum(p0, p1, p2, p3, p4, p5) {\n\t\t\tthis.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];\n\t\t}\n\n\t\tvar _proto = Frustum.prototype;\n\n\t\t_proto.set = function set(p0, p1, p2, p3, p4, p5) {\n\t\t\tvar planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(frustum) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromProjectionMatrix = function setFromProjectionMatrix(m) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[0],\n\t\t\t\t\tme1 = me[1],\n\t\t\t\t\tme2 = me[2],\n\t\t\t\t\tme3 = me[3];\n\t\t\tvar me4 = me[4],\n\t\t\t\t\tme5 = me[5],\n\t\t\t\t\tme6 = me[6],\n\t\t\t\t\tme7 = me[7];\n\t\t\tvar me8 = me[8],\n\t\t\t\t\tme9 = me[9],\n\t\t\t\t\tme10 = me[10],\n\t\t\t\t\tme11 = me[11];\n\t\t\tvar me12 = me[12],\n\t\t\t\t\tme13 = me[13],\n\t\t\t\t\tme14 = me[14],\n\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.intersectsObject = function intersectsObject(object) {\n\t\t\tvar geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSprite = function intersectsSprite(sprite) {\n\t\t\t_sphere$1.center.set(0, 0, 0);\n\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\n\t\t\t_sphere$1.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = -sphere.radius;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$5) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\treturn Frustum;\n\t}();\n\n\tfunction WebGLAnimation() {\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function setAnimationLoop(callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function setContext(value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tvar type = 5126;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = 5126;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\ttype = 5123;\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = 5122;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = 5125;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = 5124;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = 5120;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = 5121;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tvar cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tvar PlaneBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PlaneBufferGeometry, _BufferGeometry);\n\n\t\tfunction PlaneBufferGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PlaneBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\t\tvar gridX = Math.floor(widthSegments) || 1;\n\t\t\tvar gridY = Math.floor(heightSegments) || 1;\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\tvar a = _ix + gridX1 * _iy;\n\t\t\t\t\tvar b = _ix + gridX1 * (_iy + 1);\n\t\t\t\t\tvar c = _ix + 1 + gridX1 * (_iy + 1);\n\t\t\t\t\tvar d = _ix + 1 + gridX1 * _iy; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tvar ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tvar clearColor = new Color(0x000000);\n\t\tvar clearAlpha = 0;\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tif (background.isWebGLCubeRenderTarget) {\n\t\t\t\t\t// TODO Deprecate\n\t\t\t\t\tbackground = background.texture;\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function getClearColor() {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function setClearColor(color, alpha) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function getClearAlpha() {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function setClearAlpha(alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tvar maxVertexAttributes = gl.getParameter(34921);\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tvar bindingStates = {};\n\t\tvar defaultState = createBindingState(null);\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tvar state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tvar wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, 34963);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(34963, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tvar wireframe = material.wireframe === true;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tvar state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor (var i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tif (Object.keys(cachedAttributes).length !== Object.keys(geometryAttributes).length) return true;\n\n\t\t\tfor (var key in geometryAttributes) {\n\t\t\t\tvar cachedAttribute = cachedAttributes[key];\n\t\t\t\tvar geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t}\n\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor (var i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tvar _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\n\t\t\t\t_extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (var i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar programAttributes = program.getAttributes();\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (var name in programAttributes) {\n\t\t\t\tvar programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tvar _attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute === undefined) continue;\n\t\t\t\t\t\tvar _buffer = _attribute.buffer;\n\t\t\t\t\t\tvar _type = _attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, _type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, _type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, _type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, _type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tvar _attribute2 = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute2 === undefined) continue;\n\t\t\t\t\t\tvar _buffer2 = _attribute2.buffer;\n\t\t\t\t\t\tvar _type2 = _attribute2.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer2);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, _type2, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (var programId in programMap) {\n\t\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tfor (var programId in programMap) {\n\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tvar maxTextures = gl.getParameter(34930);\n\t\tvar maxVertexTextures = gl.getParameter(35660);\n\t\tvar maxTextureSize = gl.getParameter(3379);\n\t\tvar maxCubemapSize = gl.getParameter(34076);\n\t\tvar maxAttributes = gl.getParameter(34921);\n\t\tvar maxVertexUniforms = gl.getParameter(36347);\n\t\tvar maxVaryings = gl.getParameter(36348);\n\t\tvar maxFragmentUniforms = gl.getParameter(36349);\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !!extensions.get('OES_texture_float');\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tvar scope = this;\n\t\tvar globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tvar plane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tvar enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (var i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tvar cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tvar currentRenderList = renderer.getRenderList();\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar currentRenderState = renderer.getRenderState();\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\trenderer.setRenderList(currentRenderList);\n\t\t\t\t\t\t\trenderer.setRenderState(currentRenderState);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tvar extensions = {};\n\t\treturn {\n\t\t\thas: function has(name) {\n\t\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\t\treturn extensions[name] !== null;\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t\t}\n\n\t\t\t\textensions[name] = extension;\n\t\t\t\treturn extension !== null;\n\t\t\t},\n\t\t\tget: function get(name) {\n\t\t\t\tif (!this.has(name)) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get(geometry);\n\n\t\t\tif (buffergeometry.index !== null) {\n\t\t\t\tattributes.remove(buffergeometry.index);\n\t\t\t}\n\n\t\t\tfor (var name in buffergeometry.attributes) {\n\t\t\t\tattributes.remove(buffergeometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries.delete(geometry);\n\t\t\tvar attribute = wireframeAttributes.get(buffergeometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(buffergeometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tvar buffergeometry = geometries.get(geometry);\n\t\t\tif (buffergeometry) return buffergeometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tbuffergeometry = geometry;\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tif (geometry._bufferGeometry === undefined) {\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject(object);\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\t\t}\n\n\t\t\tgeometries.set(geometry, buffergeometry);\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tvar geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (var name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], 34962);\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar array = morphAttributes[_name];\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], 34962);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tvar indices = [];\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tvar a = array[i + 0];\n\t\t\t\t\tvar b = array[i + 1];\n\t\t\t\t\tvar c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3) {\n\t\t\t\t\tvar _a = _i + 0;\n\n\t\t\t\t\tvar _b = _i + 1;\n\n\t\t\t\t\tvar _c = _i + 2;\n\n\t\t\t\t\tindices.push(_a, _b, _b, _c, _c, _a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tvar currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array(8);\n\t\tvar workInfluences = [];\n\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tvar objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tvar influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (var _i = 0; _i < length; _i++) {\n\t\t\t\t\tinfluences[_i] = [_i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\t\t\t\tvar influence = influences[_i2];\n\t\t\t\tinfluence[0] = _i2;\n\t\t\t\tinfluence[1] = objectInfluences[_i2];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (var _i3 = 0; _i3 < 8; _i3++) {\n\t\t\t\tif (_i3 < length && influences[_i3][1]) {\n\t\t\t\t\tworkInfluences[_i3][0] = influences[_i3][0];\n\t\t\t\t\tworkInfluences[_i3][1] = influences[_i3][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[_i3][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[_i3][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor (var _i4 = 0; _i4 < 8; _i4++) {\n\t\t\t\tvar _influence = workInfluences[_i4];\n\t\t\t\tvar index = _influence[0];\n\t\t\t\tvar value = _influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + _i4, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + _i4, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== undefined) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== undefined) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tvar frame = info.render.frame;\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tif (geometry.isGeometry) {\n\t\t\t\t\tbuffergeometry.updateFromObject(object);\n\t\t\t\t}\n\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tattributes.update(object.instanceMatrix, 34962);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, 34962);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction DataTexture2DArray(data, width, height, depth) {\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data || null,\n\t\t\twidth: width || 1,\n\t\t\theight: height || 1,\n\t\t\tdepth: depth || 1\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture2DArray.prototype = Object.create(Texture.prototype);\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tfunction DataTexture3D(data, width, height, depth) {\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\t\tTexture.call(this, null);\n\t\tthis.image = {\n\t\t\tdata: data || null,\n\t\t\twidth: width || 1,\n\t\t\theight: height || 1,\n\t\t\tdepth: depth || 1\n\t\t};\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.needsUpdate = true;\n\t}\n\n\tDataTexture3D.prototype = Object.create(Texture.prototype);\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array(16);\n\tvar mat3array = new Float32Array(9);\n\tvar mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tvar firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (var i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (var i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tvar r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t}\n\n\tfunction setValueV2i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // uint\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t}\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of vectors (flat or from THREE classes)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (flat or from THREE clases)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tvar cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tvar seq = this.seq;\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tvar match = RePathPart.exec(path),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tvar id = match[1];\n\t\t\tvar idIsIndex = match[2] === ']',\n\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tvar n = gl.getProgramParameter(program, 35718);\n\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar info = gl.getActiveUniform(program, i),\n\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tvar u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tvar v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i],\n\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tvar r = [];\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tvar lines = string.split('\\n');\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tvar status = gl.getShaderParameter(shader, 35713);\n\t\tvar log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tvar toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tvar chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tvar chunks = [];\n\n\t\tfor (var name in defines) {\n\t\t\tvar value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tvar attributes = {};\n\t\tvar n = gl.getProgramParameter(program, 35721);\n\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar info = gl.getActiveAttrib(program, i);\n\t\t\tvar name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tvar string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tvar string = '';\n\n\t\tfor (var i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif (parameters.precision === \"highp\") {\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\t\t} else if (parameters.precision === \"mediump\") {\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\t\t} else if (parameters.precision === \"lowp\") {\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tvar gl = renderer.getContext();\n\t\tvar defines = parameters.defines;\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tvar envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tvar gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tvar customDefines = generateDefines(defines);\n\t\tvar program = gl.createProgram();\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + \"\\n\" : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader(gl, 35633, vertexGlsl);\n\t\tvar glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tvar programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, 35714) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tvar vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tvar fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tvar programs = [];\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tvar parameterNames = [\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"instancingColor\", \"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\", \"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\", \"roughnessMap\", \"metalnessMap\", \"gradientMap\", \"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\", \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\", \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\", \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\", \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\", \"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\", \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights', \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\", \"sheen\", \"transmissionMap\"];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tvar maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tvar encoding;\n\n\t\t\tif (!map) {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t} else if (map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tvar array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (var name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (var i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tvar shaderID = shaderIDs[material.type];\n\t\t\tvar uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tvar program; // Check if code has been already compiled\n\n\t\t\tfor (var p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tvar preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tvar map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\t\tvar defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = renderItems[renderItemsIndex];\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (var i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tvar renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get(scene, camera) {\n\t\t\tvar cameras = lists.get(scene);\n\t\t\tvar list;\n\n\t\t\tif (cameras === undefined) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, new WeakMap());\n\t\t\t\tlists.get(scene).set(camera, list);\n\t\t\t} else {\n\t\t\t\tlist = cameras.get(camera);\n\n\t\t\t\tif (list === undefined) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tcameras.set(camera, list);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights() {\n\t\tvar cache = new UniformsCache();\n\t\tvar shadowCache = ShadowUniformsCache();\n\t\tvar state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tstate.probe.push(new Vector3());\n\t\t}\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup(lights, shadows, camera) {\n\t\t\tvar r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (var _i = 0; _i < 9; _i++) {\n\t\t\t\tstate.probe[_i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (var _i2 = 0, l = lights.length; _i2 < l; _i2++) {\n\t\t\t\tvar light = lights[_i2];\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\t\t\t\tvar shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (var j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar shadow = light.shadow;\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms = cache.get(light);\n\n\t\t\t\t\t_uniforms.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms.distance = distance;\n\n\t\t\t\t\t_uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\t\t\t_uniforms.direction.sub(vector3);\n\n\t\t\t\t\t_uniforms.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\t_uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\t_uniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms.shadowBias = _shadow.bias;\n\t\t\t\t\t\t_shadowUniforms.shadowNormalBias = _shadow.normalBias;\n\t\t\t\t\t\t_shadowUniforms.shadowRadius = _shadow.radius;\n\t\t\t\t\t\t_shadowUniforms.shadowMapSize = _shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = _shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = _uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\n\t\t\t\t\t_uniforms2.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms2.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms2.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\n\t\t\t\t\t_uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\t_uniforms2.halfWidth.applyMatrix4(matrix42);\n\n\t\t\t\t\t_uniforms2.halfHeight.applyMatrix4(matrix42); // TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\n\t\t\t\t\tstate.rectArea[rectAreaLength] = _uniforms2;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms3 = cache.get(light);\n\n\t\t\t\t\t_uniforms3.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms3.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\t_uniforms3.distance = light.distance;\n\t\t\t\t\t_uniforms3.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow2 = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms2 = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms2.shadowBias = _shadow2.bias;\n\t\t\t\t\t\t_shadowUniforms2.shadowNormalBias = _shadow2.normalBias;\n\t\t\t\t\t\t_shadowUniforms2.shadowRadius = _shadow2.radius;\n\t\t\t\t\t\t_shadowUniforms2.shadowMapSize = _shadow2.mapSize;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraNear = _shadow2.camera.near;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraFar = _shadow2.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = _shadowUniforms2;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = _uniforms3;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms4 = cache.get(light);\n\n\t\t\t\t\t_uniforms4.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms4.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms4.direction.normalize();\n\n\t\t\t\t\t_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\n\t\t\t\t\tstate.hemi[hemiLength] = _uniforms4;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_2;\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tvar hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState() {\n\t\tvar lights = new WebGLLights();\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights(camera) {\n\t\t\tlights.setup(lightsArray, shadowsArray, camera);\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates() {\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get(scene, camera) {\n\t\t\tvar renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set(scene, new WeakMap());\n\t\t\t\trenderStates.get(scene).set(camera, renderState);\n\t\t\t} else {\n\t\t\t\tif (renderStates.get(scene).has(camera) === false) {\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get(scene).set(camera, renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene).get(camera);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDepthMaterial';\n\t\tthis.depthPacking = BasicDepthPacking;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create(Material.prototype);\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.depthPacking = source.depthPacking;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshDistanceMaterial';\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.fog = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create(Material.prototype);\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.referencePosition.copy(source.referencePosition);\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\treturn this;\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t_depthMaterials = [],\n\t\t\t\t_distanceMaterials = [],\n\t\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tvar shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\"position\", new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tvar fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tvar scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (var i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tvar light = lights[i];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tvar pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tvar _pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (var vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tvar viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tvar geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizonal pass\n\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tvar result = null;\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tvar keyA = result.uuid,\n\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tvar materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tvar geometry = _objects.update(object);\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor (var k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tvar group = groups[k];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tvar _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tvar _equationToGL, _factorToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function setMask(colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(2929);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(2929);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(512);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(519);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(513);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(514);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(518);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(516);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(517);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(2960);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(2960);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\t\tvar enabledCapabilities = {};\n\t\tvar currentProgram = null;\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\tvar currentLineWidth = null;\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\tvar maxTextures = gl.getParameter(35661);\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter(7938);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL\\ ([0-9])/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tvar data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tvar texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, 10241, 9728);\n\t\t\tgl.texParameteri(type, 10240, 9728);\n\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[3553] = createTexture(3553, 3553, 1);\n\t\temptyTextures[34067] = createTexture(34067, 34069, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(2929);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(2884);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar equationToGL = (_equationToGL = {}, _equationToGL[AddEquation] = 32774, _equationToGL[SubtractEquation] = 32778, _equationToGL[ReverseSubtractEquation] = 32779, _equationToGL);\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = 32775;\n\t\t\tequationToGL[MaxEquation] = 32776;\n\t\t} else {\n\t\t\tvar extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tvar factorToGL = (_factorToGL = {}, _factorToGL[ZeroFactor] = 0, _factorToGL[OneFactor] = 1, _factorToGL[SrcColorFactor] = 768, _factorToGL[SrcAlphaFactor] = 770, _factorToGL[SrcAlphaSaturateFactor] = 776, _factorToGL[DstColorFactor] = 774, _factorToGL[DstAlphaFactor] = 772, _factorToGL[OneMinusSrcColorFactor] = 769, _factorToGL[OneMinusSrcAlphaFactor] = 771, _factorToGL[OneMinusDstColorFactor] = 775, _factorToGL[OneMinusDstAlphaFactor] = 773, _factorToGL);\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled) {\n\t\t\t\t\tdisable(3042);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!currentBlendingEnabled) {\n\t\t\t\tenable(3042);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(32774);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(1, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(1, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 0, 769, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 768, 0, 770);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(770, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(770, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 769);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 768);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(2884) : enable(2884);\n\t\t\tvar flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(2304);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(2305);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(2884);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(1029);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(1028);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(1032);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(2884);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(32823);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(32823);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(3089);\n\t\t\t} else {\n\t\t\t\tdisable(3089);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tvar _wrappingToGL, _filterToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\n\t\tvar _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext(\"2d\") !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tvar scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tvar width = floor(scale * image.width);\n\t\t\t\t\tvar height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tvar textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\n\t\t\ttextureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif (glFormat === 6403) {\n\t\t\t\tif (glType === 5126) internalFormat = 33326;\n\t\t\t\tif (glType === 5131) internalFormat = 33325;\n\t\t\t\tif (glType === 5121) internalFormat = 33321;\n\t\t\t}\n\n\t\t\tif (glFormat === 6407) {\n\t\t\t\tif (glType === 5126) internalFormat = 34837;\n\t\t\t\tif (glType === 5131) internalFormat = 34843;\n\t\t\t\tif (glType === 5121) internalFormat = 32849;\n\t\t\t}\n\n\t\t\tif (glFormat === 6408) {\n\t\t\t\tif (glType === 5126) internalFormat = 34836;\n\t\t\t\tif (glType === 5131) internalFormat = 34842;\n\t\t\t\tif (glType === 5121) internalFormat = 32856;\n\t\t\t}\n\n\t\t\tif (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn 9728;\n\t\t\t}\n\n\t\t\treturn 9729;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tvar renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(renderTarget.texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(35866, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(32879, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t}\n\n\t\tvar wrappingToGL = (_wrappingToGL = {}, _wrappingToGL[RepeatWrapping] = 10497, _wrappingToGL[ClampToEdgeWrapping] = 33071, _wrappingToGL[MirroredRepeatWrapping] = 33648, _wrappingToGL);\n\t\tvar filterToGL = (_filterToGL = {}, _filterToGL[NearestFilter] = 9728, _filterToGL[NearestMipmapNearestFilter] = 9984, _filterToGL[NearestMipmapLinearFilter] = 9986, _filterToGL[LinearFilter] = 9729, _filterToGL[LinearMipmapNearestFilter] = 9985, _filterToGL[LinearMipmapLinearFilter] = 9987, _filterToGL);\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, 10242, 33071);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, 33071);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, 33071);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\n\t\t\tif (extension) {\n\t\t\t\tif (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;\n\t\t\t\tif (texture.type === HalfFloatType && (isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tvar textureType = 3553;\n\t\t\tif (texture.isDataTexture2DArray) textureType = 35866;\n\t\t\tif (texture.isDataTexture3D) textureType = 32879;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tvar image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tvar supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = 35056;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n\t\t\t\t\tmipmap = mipmaps[_i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tmipmap = mipmaps[_i2];\n\t\t\t\t\t\tstate.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\tvar isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tvar isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar image = cubeImage[0],\n\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\t\t\tvar mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (var _i3 = 0; _i3 < 6; _i3++) {\n\t\t\t\t\tmipmaps = cubeImage[_i3].mipmaps;\n\n\t\t\t\t\tfor (var j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tvar mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (var _i4 = 0; _i4 < 6; _i4++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n\t\t\t\t\t\tfor (var _j = 0; _j < mipmaps.length; _j++) {\n\t\t\t\t\t\t\tvar _mipmap = mipmaps[_j];\n\t\t\t\t\t\t\tvar mipmapImage = _mipmap.image[_i4].image;\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n\t\t\t\t\t\t\tvar _mipmap2 = mipmaps[_j2];\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(34067, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(36161, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);\n\t\t\t} else {\n\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\n\t\t\t\tvar _glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples2 = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(36161, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tvar isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tvar webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\tinfo.memory.textures++;\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tvar isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tvar glFormat = utils.convert(renderTarget.texture.format);\n\t\t\t\t\t\tvar glType = utils.convert(renderTarget.texture.type);\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(34067, renderTarget.texture, supportsMips);\n\n\t\t\t\tfor (var _i5 = 0; _i5 < 6; _i5++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(34067, null);\n\t\t\t} else {\n\t\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(3553, renderTarget.texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(3553, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\n\t\t\t\tvar webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\n\t\t\t\t\t_gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t_gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= 256;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= 1024;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);\n\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tvar frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn(\"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn(\"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tvar extension;\n\t\t\tif (p === UnsignedByteType) return 5121;\n\t\t\tif (p === UnsignedShort4444Type) return 32819;\n\t\t\tif (p === UnsignedShort5551Type) return 32820;\n\t\t\tif (p === UnsignedShort565Type) return 33635;\n\t\t\tif (p === ByteType) return 5120;\n\t\t\tif (p === ShortType) return 5122;\n\t\t\tif (p === UnsignedShortType) return 5123;\n\t\t\tif (p === IntType) return 5124;\n\t\t\tif (p === UnsignedIntType) return 5125;\n\t\t\tif (p === FloatType) return 5126;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return 5131;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return 6406;\n\t\t\tif (p === RGBFormat) return 6407;\n\t\t\tif (p === RGBAFormat) return 6408;\n\t\t\tif (p === LuminanceFormat) return 6409;\n\t\t\tif (p === LuminanceAlphaFormat) return 6410;\n\t\t\tif (p === DepthFormat) return 6402;\n\t\t\tif (p === DepthStencilFormat) return 34041;\n\t\t\tif (p === RedFormat) return 6403; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return 36244;\n\t\t\tif (p === RGFormat) return 33319;\n\t\t\tif (p === RGIntegerFormat) return 33320;\n\t\t\tif (p === RGBIntegerFormat) return 36248;\n\t\t\tif (p === RGBAIntegerFormat) return 36249;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return 34042;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tfunction ArrayCamera(array) {\n\t\tPerspectiveCamera.call(this);\n\t\tthis.cameras = array || [];\n\t}\n\n\tArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n\t\tconstructor: ArrayCamera,\n\t\tisArrayCamera: true\n\t});\n\n\tfunction Group() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Group';\n\t}\n\n\tGroup.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Group,\n\t\tisGroup: true\n\t});\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function getHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = [];\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\n\t\t\t\tif (window.XRHand) {\n\t\t\t\t\tfor (var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tvar joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\n\t\t\t\t\t\tthis._hand.joints.push(joint); // ??\n\n\n\t\t\t\t\t\tthis._hand.add(joint);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function getTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function getGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function disconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function update(inputSource, frame, referenceSpace) {\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif (inputSource) {\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {\n\t\t\t\t\t\tif (inputSource.hand[i]) {\n\t\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\t\tvar jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace);\n\t\t\t\t\t\t\tvar joint = hand.joints[i];\n\n\t\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tjoint.visible = jointPose !== null; // Custom events\n\t\t\t\t\t\t\t// Check pinch\n\n\t\t\t\t\t\t\tvar indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];\n\t\t\t\t\t\t\tvar thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];\n\t\t\t\t\t\t\tvar distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: \"pinchend\",\n\t\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: \"pinchstart\",\n\t\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tvar scope = this;\n\t\tvar session = null;\n\t\tvar framebufferScaleFactor = 1.0;\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\t\tvar pose = null;\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map(); //\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tvar cameras = [cameraL, cameraR];\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tvar controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear(); //\n\n\t\t\trenderer.setFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tfunction onRequestReferenceSpace(value) {\n\t\t\treferenceSpace = value;\n\t\t\tanimation.setContext(session);\n\t\t\tanimation.start();\n\t\t\tscope.isPresenting = true;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionstart'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = function (value) {\n\t\t\tsession = value;\n\n\t\t\tif (session !== null) {\n\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\tgl.makeXRCompatible();\n\t\t\t\t}\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\tvar baseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t});\n\t\t\t\tsession.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace); //\n\n\t\t\t\tsession.addEventListener('inputsourceschange', updateInputSources);\n\t\t\t}\n\t\t};\n\n\t\tfunction updateInputSources(event) {\n\t\t\tvar inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (var i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (var _i = 0; _i < event.removed.length; _i++) {\n\t\t\t\tvar inputSource = event.removed[_i];\n\t\t\t\tvar controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (var _i2 = 0; _i2 < event.added.length; _i2++) {\n\t\t\t\tvar _inputSource = event.added[_i2];\n\n\t\t\t\tvar _controller = inputSourcesMap.get(_inputSource);\n\n\t\t\t\tif (_controller) {\n\t\t\t\t\t_controller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: _inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tvar ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tvar near = projL[14] / (projL[10] - 1);\n\t\t\tvar far = projL[14] / (projL[10] + 1);\n\t\t\tvar topFov = (projL[9] + 1) / projL[5];\n\t\t\tvar bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tvar leftFov = (projL[8] - 1) / projL[0];\n\t\t\tvar rightFov = (projR[8] + 1) / projR[0];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tvar zOffset = ipd / (-leftFov + rightFov);\n\t\t\tvar xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + (ipd - xOffset);\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (var i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tvar children = camera.children;\n\n\t\t\tfor (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n\t\t\t\tchildren[_i3].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\t\t\t\trenderer.setFramebuffer(baseLayer.framebuffer);\n\t\t\t\tvar cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < views.length; i++) {\n\t\t\t\t\tvar view = views[i];\n\t\t\t\t\tvar viewport = baseLayer.getViewport(view);\n\t\t\t\t\tvar camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor (var _i4 = 0; _i4 < controllers.length; _i4++) {\n\t\t\t\tvar controller = controllers[_i4];\n\t\t\t\tvar inputSource = inputSources[_i4];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),\n\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4; // internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false; // internal state cache\n\n\t\tvar _framebuffer = null;\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\n\t\tvar _currentMaterialId = -1;\n\n\t\tvar _currentCamera = null;\n\t\tvar _currentArrayCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\n\t\tvar _currentScissor = new Vector4();\n\n\t\tvar _currentScissorTest = null; //\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissorTest = false; // frustum\n\n\t\tvar _frustum = new Frustum(); // clipping\n\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false; // camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (var i = 0; i < contextNames.length; i++) {\n\t\t\t\tvar contextName = contextNames[i];\n\n\t\t\t\tvar context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tvar contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\n\t\t\tif (capabilities.isWebGL2 === false) {\n\t\t\t\textensions.get('WEBGL_depth_texture');\n\t\t\t\textensions.get('OES_texture_float');\n\t\t\t\textensions.get('OES_texture_half_float');\n\t\t\t\textensions.get('OES_texture_half_float_linear');\n\t\t\t\textensions.get('OES_standard_derivatives');\n\t\t\t\textensions.get('OES_element_index_uint');\n\t\t\t\textensions.get('OES_vertex_array_object');\n\t\t\t\textensions.get('ANGLE_instanced_arrays');\n\t\t\t}\n\n\t\t\textensions.get('OES_texture_float_linear');\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates();\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tvar xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n\t\tthis.shadowMap = shadowMap; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function () {\n\t\t\treturn background.getClearColor();\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tvar bits = 0;\n\t\t\tif (color === undefined || color) bits |= 16384;\n\t\t\tif (depth === undefined || depth) bits |= 256;\n\t\t\tif (stencil === undefined || stencil) bits |= 1024;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tinitGLContext();\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tvar material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReference(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReference(material) {\n\t\t\tvar programInfo = properties.get(material).program;\n\n\t\t\tif (programInfo !== undefined) {\n\t\t\t\tprogramCache.releaseProgram(programInfo);\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tvar buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.position);\n\n\t\t\t\t_gl.bufferData(34962, object.positionArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.normal);\n\n\t\t\t\t_gl.bufferData(34962, object.normalArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.uv);\n\n\t\t\t\t_gl.bufferData(34962, object.uvArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.color);\n\n\t\t\t\t_gl.bufferData(34962, object.colorArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(4, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tvar dataCount = index !== null ? index.count : position.count;\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tvar drawStart = Math.max(rangeStart, groupStart);\n\t\t\tvar drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tvar drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(4);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(2);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(3);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(0);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(4);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tvar instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene, camera);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tif (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights(camera);\n\t\t\tvar compiled = new WeakMap();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tvar material2 = material[i];\n\n\t\t\t\t\t\t\tif (compiled.has(material2) === false) {\n\t\t\t\t\t\t\t\tinitMaterial(material2, scene, object);\n\t\t\t\t\t\t\t\tcompiled.set(material2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compiled.has(material) === false) {\n\t\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t\t\tcompiled.set(material);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (xr.isPresenting) return;\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t}; // Rendering\n\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, camera);\n\t\t\tcurrentRenderState.init();\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, camera);\n\t\t\tcurrentRenderList.init();\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update(object);\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _geometry = objects.update(object);\n\n\t\t\t\t\t\tvar _material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(_material)) {\n\t\t\t\t\t\t\tvar groups = _geometry.groups;\n\n\t\t\t\t\t\t\tfor (var i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\t\tvar groupMaterial = _material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var _i = 0, _l = children.length; _i < _l; _i++) {\n\t\t\t\tprojectObject(children[_i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (var i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tvar renderItem = renderList[i];\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\t_currentArrayCamera = camera;\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor (var j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tvar camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLights(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_currentArrayCamera = null;\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tcurrentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t\tcurrentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n\t\t}\n\n\t\tfunction initMaterial(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tvar lightsStateVersion = lights.state.version;\n\t\t\tvar parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif (program === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t} else if (program.cacheKey !== programCacheKey) {\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference(material);\n\t\t\t} else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n\t\t\t\tprogramChange = false;\n\t\t\t} else if (parameters.shaderID !== undefined) {\n\t\t\t\t// same glsl and uniform list, envMap still needs the update here to avoid a frame-late effect\n\t\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || environment);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\t\t}\n\n\t\t\tif (programChange) {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tvar useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.environment !== environment) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === undefined) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tvar size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t} //\n\n\n\t\tthis.setFramebuffer = function (value) {\n\t\t\tif (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(36160, value);\n\t\t\t_framebuffer = value;\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderList = function () {\n\t\t\treturn currentRenderList;\n\t\t};\n\n\t\tthis.setRenderList = function (renderList) {\n\t\t\tcurrentRenderList = renderList;\n\t\t};\n\n\t\tthis.getRenderState = function () {\n\t\t\treturn currentRenderState;\n\t\t};\n\n\t\tthis.setRenderState = function (renderState) {\n\t\t\tcurrentRenderState = renderState;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n\t\t\tif (activeCubeFace === void 0) {\n\t\t\t\tactiveCubeFace = 0;\n\t\t\t}\n\n\t\t\tif (activeMipmapLevel === void 0) {\n\t\t\t\tactiveMipmapLevel = 0;\n\t\t\t}\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tvar __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tif (_currentFramebuffer !== framebuffer) {\n\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif (framebuffer !== _currentFramebuffer) {\n\t\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t\trestore = true;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get('EXT_color_buffer_float') : extensions.get('EXT_color_buffer_half_float')))) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(36160) === 36053) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, _currentFramebuffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level) {\n\t\t\tif (level === undefined) level = 0;\n\t\t\tvar levelScale = Math.pow(2, -level);\n\t\t\tvar width = Math.floor(texture.image.width * levelScale);\n\t\t\tvar height = Math.floor(texture.image.height * levelScale);\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n\t\t\tif (level === undefined) level = 0;\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tfunction WebGL1Renderer(parameters) {\n\t\tWebGLRenderer.call(this, parameters);\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {\n\t\tconstructor: WebGL1Renderer,\n\t\tisWebGL1Renderer: true\n\t});\n\n\tvar FogExp2 = /*#__PURE__*/function () {\n\t\tfunction FogExp2(color, density) {\n\t\t\tObject.defineProperty(this, 'isFogExp2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density !== undefined ? density : 0.00025;\n\t\t}\n\n\t\tvar _proto = FogExp2.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t};\n\n\t\treturn FogExp2;\n\t}();\n\n\tvar Fog = /*#__PURE__*/function () {\n\t\tfunction Fog(color, near, far) {\n\t\t\tObject.defineProperty(this, 'isFog', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near !== undefined ? near : 1;\n\t\t\tthis.far = far !== undefined ? far : 1000;\n\t\t}\n\n\t\tvar _proto = Fog.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t};\n\n\t\treturn Fog;\n\t}();\n\n\tvar Scene = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Scene, _Object3D);\n\n\t\tfunction Scene() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'isScene', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\t_this.type = 'Scene';\n\t\t\t_this.background = null;\n\t\t\t_this.environment = null;\n\t\t\t_this.fog = null;\n\t\t\t_this.overrideMaterial = null;\n\t\t\t_this.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: _assertThisInitialized(_this)\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Scene.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Object3D.prototype.copy.call(this, source, recursive);\n\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Scene;\n\t}(Object3D);\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (var i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tvar ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function set(value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'SpriteMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.rotation = 0;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tSpriteMaterial.prototype = Object.create(Material.prototype);\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.rotation = source.rotation;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\treturn this;\n\t};\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\n\tvar _worldScale = new Vector3();\n\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\n\tvar _rotatedPosition = new Vector2();\n\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\n\tvar _vB$1 = new Vector3();\n\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\n\tvar _uvB$1 = new Vector2();\n\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite(material) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Sprite';\n\n\t\tif (_geometry === undefined) {\n\t\t\t_geometry = new BufferGeometry();\n\t\t\tvar float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\tvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\tthis.center = new Vector2(0.5, 0.5);\n\t}\n\n\tSprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Sprite,\n\t\tisSprite: true,\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\t\t\ttransformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA$1.set(0, 0);\n\n\t\t\t_uvB$1.set(1, 0);\n\n\t\t\t_uvC$1.set(1, 1); // check first triangle\n\n\n\t\t\tvar intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB$1.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tvar _v1$4 = new Vector3();\n\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\t\tObject3D.call(this);\n\t\tthis._currentLevel = 0;\n\t\tthis.type = 'LOD';\n\t\tObject.defineProperties(this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t});\n\t\tthis.autoUpdate = true;\n\t}\n\n\tLOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: LOD,\n\t\tisLOD: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source, false);\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t},\n\t\taddLevel: function addLevel(object, distance) {\n\t\t\tif (distance === undefined) distance = 0;\n\t\t\tdistance = Math.abs(distance);\n\t\t\tvar levels = this.levels;\n\t\t\tvar l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t},\n\t\tgetCurrentLevel: function getCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t},\n\t\tgetObjectForDistance: function getObjectForDistance(distance) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$4.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(_v1$4);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t},\n\t\tupdate: function update(camera) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$4.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = _v1$4.distanceTo(_v2$2) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tif (geometry && geometry.isGeometry) {\n\t\t\tconsole.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t}\n\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function bind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.getInverse(bindMatrix);\n\t\t},\n\t\tpose: function pose() {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function normalizeSkinWeights() {\n\t\t\tvar vector = new Vector4();\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (var i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.getInverse(this.matrixWorld);\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.getInverse(this.bindMatrix);\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function () {\n\t\t\tvar basePosition = new Vector3();\n\t\t\tvar skinIndex = new Vector4();\n\t\t\tvar skinWeight = new Vector4();\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\t\t\treturn function (index, target) {\n\t\t\t\tvar skeleton = this.skeleton;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tskinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\t\t\t\tskinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\t\t\t\tbasePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\t\t\t\ttarget.set(0, 0, 0);\n\n\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\tvar weight = skinWeight.getComponent(i);\n\n\t\t\t\t\tif (weight !== 0) {\n\t\t\t\t\t\tvar boneIndex = skinIndex.getComponent(i);\n\t\t\t\t\t\tmatrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\t\t\t\t\t\ttarget.addScaledVector(vector.copy(basePosition).applyMatrix4(matrix), weight);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t\t};\n\t\t}()\n\t});\n\n\tvar _offsetMatrix = new Matrix4();\n\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton(bones, boneInverses) {\n\t\t// copy the bone array\n\t\tbones = bones || [];\n\t\tthis.bones = bones.slice(0);\n\t\tthis.boneMatrices = new Float32Array(this.bones.length * 16);\n\t\tthis.frame = -1; // use the supplied bone inverses or calculate the inverses\n\n\t\tif (boneInverses === undefined) {\n\t\t\tthis.calculateInverses();\n\t\t} else {\n\t\t\tif (this.bones.length === boneInverses.length) {\n\t\t\t\tthis.boneInverses = boneInverses.slice(0);\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Skeleton boneInverses is the wrong length.');\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Skeleton.prototype, {\n\t\tcalculateInverses: function calculateInverses() {\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.getInverse(this.bones[i].matrixWorld);\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t},\n\t\tpose: function pose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.getInverse(this.boneInverses[i]);\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (var _i = 0, _il = this.bones.length; _i < _il; _i++) {\n\t\t\t\tvar _bone = this.bones[_i];\n\n\t\t\t\tif (_bone) {\n\t\t\t\t\tif (_bone.parent && _bone.parent.isBone) {\n\t\t\t\t\t\t_bone.matrix.getInverse(_bone.parent.matrixWorld);\n\n\t\t\t\t\t\t_bone.matrix.multiply(_bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\t_bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdate: function update() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (var i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tvar matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== undefined) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t},\n\t\tgetBoneByName: function getBoneByName(name) {\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tif (this.boneTexture) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = undefined;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tsetColorAt: function setColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function getMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tvar intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetMatrixAt: function setMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'LineBasicMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineBasicMaterial.prototype = Object.create(Material.prototype);\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _start = new Vector3();\n\n\tvar _end = new Vector3();\n\n\tvar _inverseMatrix$1 = new Matrix4();\n\n\tvar _ray$1 = new Ray();\n\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line(geometry, material, mode) {\n\t\tif (mode === 1) {\n\t\t\tconsole.error('THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.');\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [0];\n\n\t\t\t\t\tfor (var i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar _lineDistances = geometry.lineDistances;\n\t\t\t\t_lineDistances[0] = 0;\n\n\t\t\t\tfor (var _i = 1, _l = vertices.length; _i < _l; _i++) {\n\t\t\t\t\t_lineDistances[_i] = _lineDistances[_i - 1];\n\t\t\t\t\t_lineDistances[_i] += vertices[_i - 1].distanceTo(vertices[_i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$2.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$2.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$2) === false) return; //\n\n\t\t\t_inverseMatrix$1.getInverse(matrixWorld);\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\t\t\tvar a = indices[i];\n\t\t\t\t\t\tvar b = indices[i + 1];\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i2 = 0, _l2 = positionAttribute.count - 1; _i2 < _l2; _i2 += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, _i2);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, _i2 + 1);\n\n\t\t\t\t\t\tvar _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (_distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar _distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\t\tif (_distance < raycaster.near || _distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: _distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: _i2,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor (var _i3 = 0; _i3 < nbVertices - 1; _i3 += step) {\n\t\t\t\t\tvar _distSq2 = _ray$1.distanceSqToSegment(vertices[_i3], vertices[_i3 + 1], interRay, interSegment);\n\n\t\t\t\t\tif (_distSq2 > localThresholdSq) continue;\n\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar _distance2 = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\tif (_distance2 < raycaster.near || _distance2 > raycaster.far) continue;\n\t\t\t\t\tintersects.push({\n\t\t\t\t\t\tdistance: _distance2,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\tindex: _i3,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _start$1 = new Vector3();\n\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar _lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor (var _i = 0, _l = vertices.length; _i < _l; _i += 2) {\n\t\t\t\t\t_start$1.copy(vertices[_i]);\n\n\t\t\t\t\t_end$1.copy(vertices[_i + 1]);\n\n\t\t\t\t\t_lineDistances[_i] = _i === 0 ? 0 : _lineDistances[_i - 1];\n\t\t\t\t\t_lineDistances[_i + 1] = _lineDistances[_i] + _start$1.distanceTo(_end$1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LineLoop(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineLoop';\n\t}\n\n\tLineLoop.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineLoop,\n\t\tisLineLoop: true\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'PointsMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.alphaMap = null;\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\t\tthis.morphTargets = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tPointsMaterial.prototype = Object.create(Material.prototype);\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\tthis.morphTargets = source.morphTargets;\n\t\treturn this;\n\t};\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\n\tvar _ray$2 = new Ray();\n\n\tvar _sphere$3 = new Sphere();\n\n\tvar _position$1 = new Vector3();\n\n\tfunction Points(geometry, material) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$3.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.getInverse(matrixWorld);\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, il = indices.length; i < il; i++) {\n\t\t\t\t\t\tvar a = indices[i];\n\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, l = positionAttribute.count; _i < l; _i++) {\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, _i);\n\n\t\t\t\t\t\ttestPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor (var _i2 = 0, _l = vertices.length; _i2 < _l; _i2++) {\n\t\t\t\t\ttestPoint(vertices[_i2], _i2, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.generateMipmaps = false;\n\t\tvar scope = this;\n\n\t\tfunction updateVideo() {\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\n\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t}\n\t}\n\n\tVideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {\n\t\tconstructor: VideoTexture,\n\t\tisVideoTexture: true,\n\t\tupdate: function update() {\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tCompressedTexture.prototype = Object.create(Texture.prototype);\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\tTexture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.needsUpdate = true;\n\t}\n\n\tCanvasTexture.prototype = Object.create(Texture.prototype);\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t}\n\n\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\tTexture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\tthis.image = {\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\t}\n\n\tDepthTexture.prototype = Object.create(Texture.prototype);\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\n\tvar _m1$3 = new Matrix4();\n\n\tvar _obj$1 = new Object3D();\n\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _geometryId += 2\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null; // update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\t}\n\n\tGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Geometry,\n\t\tisGeometry: true,\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n\t\t\tfor (var i = 0, il = this.vertices.length; i < il; i++) {\n\t\t\t\tvar vertex = this.vertices[i];\n\t\t\t\tvertex.applyMatrix4(matrix);\n\t\t\t}\n\n\t\t\tfor (var _i = 0, _il = this.faces.length; _i < _il; _i++) {\n\t\t\t\tvar face = this.faces[_i];\n\t\t\t\tface.normal.applyMatrix3(normalMatrix).normalize();\n\n\t\t\t\tfor (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n\t\t\t\t\tface.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$3.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$3.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$3.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$3.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$3.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$3);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj$1.lookAt(vector);\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj$1.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tfromBufferGeometry: function fromBufferGeometry(geometry) {\n\t\t\tvar scope = this;\n\t\t\tvar index = geometry.index !== null ? geometry.index : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif (attributes.position === undefined) {\n\t\t\t\tconsole.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar position = attributes.position;\n\t\t\tvar normal = attributes.normal;\n\t\t\tvar color = attributes.color;\n\t\t\tvar uv = attributes.uv;\n\t\t\tvar uv2 = attributes.uv2;\n\t\t\tif (uv2 !== undefined) this.faceVertexUvs[1] = [];\n\n\t\t\tfor (var i = 0; i < position.count; i++) {\n\t\t\t\tscope.vertices.push(new Vector3().fromBufferAttribute(position, i));\n\n\t\t\t\tif (color !== undefined) {\n\t\t\t\t\tscope.colors.push(new Color().fromBufferAttribute(color, i));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction addFace(a, b, c, materialIndex) {\n\t\t\t\tvar vertexColors = color === undefined ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n\t\t\t\tvar vertexNormals = normal === undefined ? [] : [new Vector3().fromBufferAttribute(normal, a), new Vector3().fromBufferAttribute(normal, b), new Vector3().fromBufferAttribute(normal, c)];\n\t\t\t\tvar face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n\t\t\t\tscope.faces.push(face);\n\n\t\t\t\tif (uv !== undefined) {\n\t\t\t\t\tscope.faceVertexUvs[0].push([new Vector2().fromBufferAttribute(uv, a), new Vector2().fromBufferAttribute(uv, b), new Vector2().fromBufferAttribute(uv, c)]);\n\t\t\t\t}\n\n\t\t\t\tif (uv2 !== undefined) {\n\t\t\t\t\tscope.faceVertexUvs[1].push([new Vector2().fromBufferAttribute(uv2, a), new Vector2().fromBufferAttribute(uv2, b), new Vector2().fromBufferAttribute(uv2, c)]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tfor (var _i2 = 0; _i2 < groups.length; _i2++) {\n\t\t\t\t\tvar group = groups[_i2];\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor (var j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\t\tif (index !== undefined) {\n\t\t\t\t\t\t\taddFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taddFace(j, j + 1, j + 2, group.materialIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tfor (var _i3 = 0; _i3 < index.count; _i3 += 3) {\n\t\t\t\t\t\taddFace(index.getX(_i3), index.getX(_i3 + 1), index.getX(_i3 + 2));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i4 = 0; _i4 < position.count; _i4 += 3) {\n\t\t\t\t\t\taddFace(_i4, _i4 + 1, _i4 + 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\t\t}\n\n\t\t\tif (geometry.boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset$1).negate();\n\t\t\tthis.translate(_offset$1.x, _offset$1.y, _offset$1.z);\n\t\t\treturn this;\n\t\t},\n\t\tnormalize: function normalize() {\n\t\t\tthis.computeBoundingSphere();\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n\t\t\tthis.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {\n\t\t\tvar cb = new Vector3(),\n\t\t\t\t\tab = new Vector3();\n\n\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\tvar face = this.faces[f];\n\t\t\t\tvar vA = this.vertices[face.a];\n\t\t\t\tvar vB = this.vertices[face.b];\n\t\t\t\tvar vC = this.vertices[face.c];\n\t\t\t\tcb.subVectors(vC, vB);\n\t\t\t\tab.subVectors(vA, vB);\n\t\t\t\tcb.cross(ab);\n\t\t\t\tcb.normalize();\n\t\t\t\tface.normal.copy(cb);\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals(areaWeighted) {\n\t\t\tif (areaWeighted === undefined) areaWeighted = true;\n\t\t\tvar vertices = new Array(this.vertices.length);\n\n\t\t\tfor (var v = 0, vl = this.vertices.length; v < vl; v++) {\n\t\t\t\tvertices[v] = new Vector3();\n\t\t\t}\n\n\t\t\tif (areaWeighted) {\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3();\n\n\t\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\t\tvar face = this.faces[f];\n\t\t\t\t\tvar vA = this.vertices[face.a];\n\t\t\t\t\tvar vB = this.vertices[face.b];\n\t\t\t\t\tvar vC = this.vertices[face.c];\n\t\t\t\t\tcb.subVectors(vC, vB);\n\t\t\t\t\tab.subVectors(vA, vB);\n\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\tvertices[face.a].add(cb);\n\t\t\t\t\tvertices[face.b].add(cb);\n\t\t\t\t\tvertices[face.c].add(cb);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor (var _f = 0, _fl = this.faces.length; _f < _fl; _f++) {\n\t\t\t\t\tvar _face = this.faces[_f];\n\n\t\t\t\t\tvertices[_face.a].add(_face.normal);\n\n\t\t\t\t\tvertices[_face.b].add(_face.normal);\n\n\t\t\t\t\tvertices[_face.c].add(_face.normal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _v = 0, _vl = this.vertices.length; _v < _vl; _v++) {\n\t\t\t\tvertices[_v].normalize();\n\t\t\t}\n\n\t\t\tfor (var _f2 = 0, _fl2 = this.faces.length; _f2 < _fl2; _f2++) {\n\t\t\t\tvar _face2 = this.faces[_f2];\n\t\t\t\tvar vertexNormals = _face2.vertexNormals;\n\n\t\t\t\tif (vertexNormals.length === 3) {\n\t\t\t\t\tvertexNormals[0].copy(vertices[_face2.a]);\n\t\t\t\t\tvertexNormals[1].copy(vertices[_face2.b]);\n\t\t\t\t\tvertexNormals[2].copy(vertices[_face2.c]);\n\t\t\t\t} else {\n\t\t\t\t\tvertexNormals[0] = vertices[_face2.a].clone();\n\t\t\t\t\tvertexNormals[1] = vertices[_face2.b].clone();\n\t\t\t\t\tvertexNormals[2] = vertices[_face2.c].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.faces.length > 0) {\n\t\t\t\tthis.normalsNeedUpdate = true;\n\t\t\t}\n\t\t},\n\t\tcomputeFlatVertexNormals: function computeFlatVertexNormals() {\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\tvar face = this.faces[f];\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif (vertexNormals.length === 3) {\n\t\t\t\t\tvertexNormals[0].copy(face.normal);\n\t\t\t\t\tvertexNormals[1].copy(face.normal);\n\t\t\t\t\tvertexNormals[2].copy(face.normal);\n\t\t\t\t} else {\n\t\t\t\t\tvertexNormals[0] = face.normal.clone();\n\t\t\t\t\tvertexNormals[1] = face.normal.clone();\n\t\t\t\t\tvertexNormals[2] = face.normal.clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.faces.length > 0) {\n\t\t\t\tthis.normalsNeedUpdate = true;\n\t\t\t}\n\t\t},\n\t\tcomputeMorphNormals: function computeMorphNormals() {\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//\t otherwise just copy (for faster repeated calls)\n\t\t\tfor (var f = 0, fl = this.faces.length; f < fl; f++) {\n\t\t\t\tvar face = this.faces[f];\n\n\t\t\t\tif (!face.__originalFaceNormal) {\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\t\t\t} else {\n\t\t\t\t\tface.__originalFaceNormal.copy(face.normal);\n\t\t\t\t}\n\n\t\t\t\tif (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n\t\t\t\tfor (var i = 0, il = face.vertexNormals.length; i < il; i++) {\n\t\t\t\t\tif (!face.__originalVertexNormals[i]) {\n\t\t\t\t\t\tface.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tface.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // use temp geometry to compute face and vertex normals for each morph\n\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor (var _i5 = 0, _il2 = this.morphTargets.length; _i5 < _il2; _i5++) {\n\t\t\t\t// create on first access\n\t\t\t\tif (!this.morphNormals[_i5]) {\n\t\t\t\t\tthis.morphNormals[_i5] = {};\n\t\t\t\t\tthis.morphNormals[_i5].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[_i5].vertexNormals = [];\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[_i5].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[_i5].vertexNormals;\n\n\t\t\t\t\tfor (var _f3 = 0, _fl3 = this.faces.length; _f3 < _fl3; _f3++) {\n\t\t\t\t\t\tvar faceNormal = new Vector3();\n\t\t\t\t\t\tvar vertexNormals = {\n\t\t\t\t\t\t\ta: new Vector3(),\n\t\t\t\t\t\t\tb: new Vector3(),\n\t\t\t\t\t\t\tc: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdstNormalsFace.push(faceNormal);\n\t\t\t\t\t\tdstNormalsVertex.push(vertexNormals);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[_i5]; // set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[_i5].vertices; // compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals(); // store morph normals\n\n\t\t\t\tfor (var _f4 = 0, _fl4 = this.faces.length; _f4 < _fl4; _f4++) {\n\t\t\t\t\tvar _face3 = this.faces[_f4];\n\t\t\t\t\tvar _faceNormal = morphNormals.faceNormals[_f4];\n\t\t\t\t\tvar _vertexNormals = morphNormals.vertexNormals[_f4];\n\n\t\t\t\t\t_faceNormal.copy(_face3.normal);\n\n\t\t\t\t\t_vertexNormals.a.copy(_face3.vertexNormals[0]);\n\n\t\t\t\t\t_vertexNormals.b.copy(_face3.vertexNormals[1]);\n\n\t\t\t\t\t_vertexNormals.c.copy(_face3.vertexNormals[2]);\n\t\t\t\t}\n\t\t\t} // restore original normals\n\n\n\t\t\tfor (var _f5 = 0, _fl5 = this.faces.length; _f5 < _fl5; _f5++) {\n\t\t\t\tvar _face4 = this.faces[_f5];\n\t\t\t\t_face4.normal = _face4.__originalFaceNormal;\n\t\t\t\t_face4.vertexNormals = _face4.__originalVertexNormals;\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints(this.vertices);\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints(this.vertices);\n\t\t},\n\t\tmerge: function merge(geometry, matrix, materialIndexOffset) {\n\t\t\tif (!(geometry && geometry.isGeometry)) {\n\t\t\t\tconsole.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar normalMatrix;\n\t\t\tvar vertexOffset = this.vertices.length,\n\t\t\t\t\tvertices1 = this.vertices,\n\t\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\t\tfaces1 = this.faces,\n\t\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\t\tcolors1 = this.colors,\n\t\t\t\t\tcolors2 = geometry.colors;\n\t\t\tif (materialIndexOffset === undefined) materialIndexOffset = 0;\n\n\t\t\tif (matrix !== undefined) {\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t} // vertices\n\n\n\t\t\tfor (var i = 0, il = vertices2.length; i < il; i++) {\n\t\t\t\tvar vertex = vertices2[i];\n\t\t\t\tvar vertexCopy = vertex.clone();\n\t\t\t\tif (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n\t\t\t\tvertices1.push(vertexCopy);\n\t\t\t} // colors\n\n\n\t\t\tfor (var _i6 = 0, _il3 = colors2.length; _i6 < _il3; _i6++) {\n\t\t\t\tcolors1.push(colors2[_i6].clone());\n\t\t\t} // faces\n\n\n\t\t\tfor (var _i7 = 0, _il4 = faces2.length; _i7 < _il4; _i7++) {\n\t\t\t\tvar face = faces2[_i7];\n\t\t\t\tvar normal = void 0,\n\t\t\t\t\t\tcolor = void 0;\n\t\t\t\tvar faceVertexNormals = face.vertexNormals,\n\t\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\t\t\t\tvar faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n\t\t\t\tfaceCopy.normal.copy(face.normal);\n\n\t\t\t\tif (normalMatrix !== undefined) {\n\t\t\t\t\tfaceCopy.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\t\t}\n\n\t\t\t\tfor (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n\t\t\t\t\tnormal = faceVertexNormals[j].clone();\n\n\t\t\t\t\tif (normalMatrix !== undefined) {\n\t\t\t\t\t\tnormal.applyMatrix3(normalMatrix).normalize();\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push(normal);\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy(face.color);\n\n\t\t\t\tfor (var _j = 0, _jl = faceVertexColors.length; _j < _jl; _j++) {\n\t\t\t\t\tcolor = faceVertexColors[_j];\n\t\t\t\t\tfaceCopy.vertexColors.push(color.clone());\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\t\t\tfaces1.push(faceCopy);\n\t\t\t} // uvs\n\n\n\t\t\tfor (var _i8 = 0, _il5 = geometry.faceVertexUvs.length; _i8 < _il5; _i8++) {\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[_i8];\n\t\t\t\tif (this.faceVertexUvs[_i8] === undefined) this.faceVertexUvs[_i8] = [];\n\n\t\t\t\tfor (var _j2 = 0, _jl2 = faceVertexUvs2.length; _j2 < _jl2; _j2++) {\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[_j2],\n\t\t\t\t\t\t\tuvsCopy = [];\n\n\t\t\t\t\tfor (var k = 0, kl = uvs2.length; k < kl; k++) {\n\t\t\t\t\t\tuvsCopy.push(uvs2[k].clone());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[_i8].push(uvsCopy);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmergeMesh: function mergeMesh(mesh) {\n\t\t\tif (!(mesh && mesh.isMesh)) {\n\t\t\t\tconsole.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (mesh.matrixAutoUpdate) mesh.updateMatrix();\n\t\t\tthis.merge(mesh.geometry, mesh.matrix);\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\t\tmergeVertices: function mergeVertices() {\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n\t\t\tvar unique = [],\n\t\t\t\t\tchanges = [];\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\n\t\t\tfor (var i = 0, il = this.vertices.length; i < il; i++) {\n\t\t\t\tvar v = this.vertices[i];\n\t\t\t\tvar key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);\n\n\t\t\t\tif (verticesMap[key] === undefined) {\n\t\t\t\t\tverticesMap[key] = i;\n\t\t\t\t\tunique.push(this.vertices[i]);\n\t\t\t\t\tchanges[i] = unique.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[i] = changes[verticesMap[key]];\n\t\t\t\t}\n\t\t\t} // if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\n\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor (var _i9 = 0, _il6 = this.faces.length; _i9 < _il6; _i9++) {\n\t\t\t\tvar face = this.faces[_i9];\n\t\t\t\tface.a = changes[face.a];\n\t\t\t\tface.b = changes[face.b];\n\t\t\t\tface.c = changes[face.c];\n\t\t\t\tvar indices = [face.a, face.b, face.c]; // if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\n\t\t\t\tfor (var n = 0; n < 3; n++) {\n\t\t\t\t\tif (indices[n] === indices[(n + 1) % 3]) {\n\t\t\t\t\t\tfaceIndicesToRemove.push(_i9);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i10 = faceIndicesToRemove.length - 1; _i10 >= 0; _i10--) {\n\t\t\t\tvar idx = faceIndicesToRemove[_i10];\n\t\t\t\tthis.faces.splice(idx, 1);\n\n\t\t\t\tfor (var j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n\t\t\t\t\tthis.faceVertexUvs[j].splice(idx, 1);\n\t\t\t\t}\n\t\t\t} // Use unique set of vertices\n\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tthis.vertices = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tthis.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsortFacesByMaterialIndex: function sortFacesByMaterialIndex() {\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length; // tag faces\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tfaces[i]._id = i;\n\t\t\t} // sort faces\n\n\n\t\t\tfunction materialIndexSort(a, b) {\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\t\t\t}\n\n\t\t\tfaces.sort(materialIndexSort); // sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[0];\n\t\t\tvar uvs2 = this.faceVertexUvs[1];\n\t\t\tvar newUvs1, newUvs2;\n\t\t\tif (uvs1 && uvs1.length === length) newUvs1 = [];\n\t\t\tif (uvs2 && uvs2.length === length) newUvs2 = [];\n\n\t\t\tfor (var _i11 = 0; _i11 < length; _i11++) {\n\t\t\t\tvar id = faces[_i11]._id;\n\t\t\t\tif (newUvs1) newUvs1.push(uvs1[id]);\n\t\t\t\tif (newUvs2) newUvs2.push(uvs2[id]);\n\t\t\t}\n\n\t\t\tif (newUvs1) this.faceVertexUvs[0] = newUvs1;\n\t\t\tif (newUvs2) this.faceVertexUvs[1] = newUvs2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < this.vertices.length; i++) {\n\t\t\t\tvar vertex = this.vertices[i];\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor (var _i12 = 0; _i12 < this.faces.length; _i12++) {\n\t\t\t\tvar face = this.faces[_i12];\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[0][_i12] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\t\t\tvar faceType = 0;\n\t\t\t\tfaceType = setBit(faceType, 0, 0); // isQuad\n\n\t\t\t\tfaceType = setBit(faceType, 1, hasMaterial);\n\t\t\t\tfaceType = setBit(faceType, 2, hasFaceUv);\n\t\t\t\tfaceType = setBit(faceType, 3, hasFaceVertexUv);\n\t\t\t\tfaceType = setBit(faceType, 4, hasFaceNormal);\n\t\t\t\tfaceType = setBit(faceType, 5, hasFaceVertexNormal);\n\t\t\t\tfaceType = setBit(faceType, 6, hasFaceColor);\n\t\t\t\tfaceType = setBit(faceType, 7, hasFaceVertexColor);\n\t\t\t\tfaces.push(faceType);\n\t\t\t\tfaces.push(face.a, face.b, face.c);\n\t\t\t\tfaces.push(face.materialIndex);\n\n\t\t\t\tif (hasFaceVertexUv) {\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[0][_i12];\n\t\t\t\t\tfaces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceNormal) {\n\t\t\t\t\tfaces.push(getNormalIndex(face.normal));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexNormal) {\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\t\t\t\tfaces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceColor) {\n\t\t\t\t\tfaces.push(getColorIndex(face.color));\n\t\t\t\t}\n\n\t\t\t\tif (hasFaceVertexColor) {\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\t\t\t\t\tfaces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction setBit(value, position, enabled) {\n\t\t\t\treturn enabled ? value | 1 << position : value & ~(1 << position);\n\t\t\t}\n\n\t\t\tfunction getNormalIndex(normal) {\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif (normalsHash[hash] !== undefined) {\n\t\t\t\t\treturn normalsHash[hash];\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[hash] = normals.length / 3;\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z);\n\t\t\t\treturn normalsHash[hash];\n\t\t\t}\n\n\t\t\tfunction getColorIndex(color) {\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif (colorsHash[hash] !== undefined) {\n\t\t\t\t\treturn colorsHash[hash];\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[hash] = colors.length;\n\t\t\t\tcolors.push(color.getHex());\n\t\t\t\treturn colorsHash[hash];\n\t\t\t}\n\n\t\t\tfunction getUvIndex(uv) {\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif (uvsHash[hash] !== undefined) {\n\t\t\t\t\treturn uvsHash[hash];\n\t\t\t\t}\n\n\t\t\t\tuvsHash[hash] = uvs.length / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\treturn uvsHash[hash];\n\t\t\t}\n\n\t\t\tdata.data = {};\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif (colors.length > 0) data.data.colors = colors;\n\t\t\tif (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n\t\t\tdata.data.faces = faces;\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new Geometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // name\n\n\t\t\tthis.name = source.name; // vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor (var i = 0, il = vertices.length; i < il; i++) {\n\t\t\t\tthis.vertices.push(vertices[i].clone());\n\t\t\t} // colors\n\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor (var _i13 = 0, _il7 = colors.length; _i13 < _il7; _i13++) {\n\t\t\t\tthis.colors.push(colors[_i13].clone());\n\t\t\t} // faces\n\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor (var _i14 = 0, _il8 = faces.length; _i14 < _il8; _i14++) {\n\t\t\t\tthis.faces.push(faces[_i14].clone());\n\t\t\t} // face vertex uvs\n\n\n\t\t\tfor (var _i15 = 0, _il9 = source.faceVertexUvs.length; _i15 < _il9; _i15++) {\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[_i15];\n\n\t\t\t\tif (this.faceVertexUvs[_i15] === undefined) {\n\t\t\t\t\tthis.faceVertexUvs[_i15] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n\t\t\t\t\tvar uvs = faceVertexUvs[j],\n\t\t\t\t\t\t\tuvsCopy = [];\n\n\t\t\t\t\tfor (var k = 0, kl = uvs.length; k < kl; k++) {\n\t\t\t\t\t\tvar uv = uvs[k];\n\t\t\t\t\t\tuvsCopy.push(uv.clone());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[_i15].push(uvsCopy);\n\t\t\t\t}\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor (var _i16 = 0, _il10 = morphTargets.length; _i16 < _il10; _i16++) {\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[_i16].name; // vertices\n\n\t\t\t\tif (morphTargets[_i16].vertices !== undefined) {\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor (var _j3 = 0, _jl3 = morphTargets[_i16].vertices.length; _j3 < _jl3; _j3++) {\n\t\t\t\t\t\tmorphTarget.vertices.push(morphTargets[_i16].vertices[_j3].clone());\n\t\t\t\t\t}\n\t\t\t\t} // normals\n\n\n\t\t\t\tif (morphTargets[_i16].normals !== undefined) {\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor (var _j4 = 0, _jl4 = morphTargets[_i16].normals.length; _j4 < _jl4; _j4++) {\n\t\t\t\t\t\tmorphTarget.normals.push(morphTargets[_i16].normals[_j4].clone());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push(morphTarget);\n\t\t\t} // morph normals\n\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor (var _i17 = 0, _il11 = morphNormals.length; _i17 < _il11; _i17++) {\n\t\t\t\tvar morphNormal = {}; // vertex normals\n\n\t\t\t\tif (morphNormals[_i17].vertexNormals !== undefined) {\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor (var _j5 = 0, _jl5 = morphNormals[_i17].vertexNormals.length; _j5 < _jl5; _j5++) {\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[_i17].vertexNormals[_j5];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\t\t\t\t\t\tmorphNormal.vertexNormals.push(destVertexNormal);\n\t\t\t\t\t}\n\t\t\t\t} // face normals\n\n\n\t\t\t\tif (morphNormals[_i17].faceNormals !== undefined) {\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor (var _j6 = 0, _jl6 = morphNormals[_i17].faceNormals.length; _j6 < _jl6; _j6++) {\n\t\t\t\t\t\tmorphNormal.faceNormals.push(morphNormals[_i17].faceNormals[_j6].clone());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push(morphNormal);\n\t\t\t} // skin weights\n\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor (var _i18 = 0, _il12 = skinWeights.length; _i18 < _il12; _i18++) {\n\t\t\t\tthis.skinWeights.push(skinWeights[_i18].clone());\n\t\t\t} // skin indices\n\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor (var _i19 = 0, _il13 = skinIndices.length; _i19 < _il13; _i19++) {\n\t\t\t\tthis.skinIndices.push(skinIndices[_i19].clone());\n\t\t\t} // line distances\n\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor (var _i20 = 0, _il14 = lineDistances.length; _i20 < _il14; _i20++) {\n\t\t\t\tthis.lineDistances.push(lineDistances[_i20]);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // update flags\n\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar BoxGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(BoxGeometry, _Geometry);\n\n\t\tfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'BoxGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxGeometry;\n\t}(Geometry);\n\n\tvar CircleBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CircleBufferGeometry, _BufferGeometry);\n\n\t\tfunction CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CircleBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tradius = radius || 1;\n\t\t\tsegments = segments !== undefined ? Math.max(3, segments) : 8;\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (var s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tindices.push(_i, _i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar CircleGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(CircleGeometry, _Geometry);\n\n\t\tfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'CircleGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleGeometry;\n\t}(Geometry);\n\n\tvar CylinderBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CylinderBufferGeometry, _BufferGeometry);\n\n\t\tfunction CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CylinderBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\t\theight = height || 1;\n\t\t\tradialSegments = Math.floor(radialSegments) || 8;\n\t\t\theightSegments = Math.floor(heightSegments) || 1;\n\t\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tvar slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (var y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tvar indexRow = [];\n\t\t\t\t\tvar v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (var x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tvar sinTheta = Math.sin(theta);\n\t\t\t\t\t\tvar cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x = 0; _x < radialSegments; _x++) {\n\t\t\t\t\tfor (var _y = 0; _y < heightSegments; _y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar a = indexArray[_y][_x];\n\t\t\t\t\t\tvar b = indexArray[_y + 1][_x];\n\t\t\t\t\t\tvar c = indexArray[_y + 1][_x + 1];\n\t\t\t\t\t\tvar d = indexArray[_y][_x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (var x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tvar centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (var _x2 = 0; _x2 <= radialSegments; _x2++) {\n\t\t\t\t\tvar u = _x2 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\tvar cosTheta = Math.cos(theta);\n\t\t\t\t\tvar sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x3 = 0; _x3 < radialSegments; _x3++) {\n\t\t\t\t\tvar c = centerIndexStart + _x3;\n\t\t\t\t\tvar i = centerIndexEnd + _x3;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar CylinderGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(CylinderGeometry, _Geometry);\n\n\t\tfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'CylinderGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderGeometry;\n\t}(Geometry);\n\n\tvar ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n\t\t_inheritsLoose(ConeGeometry, _CylinderGeometry);\n\n\t\tfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeGeometry;\n\t}(CylinderGeometry);\n\n\tvar ConeBufferGeometry = /*#__PURE__*/function (_CylinderBufferGeomet) {\n\t\t_inheritsLoose(ConeBufferGeometry, _CylinderBufferGeomet);\n\n\t\tfunction ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _CylinderBufferGeomet.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeBufferGeometry;\n\t}(CylinderBufferGeometry);\n\n\tvar PolyhedronBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PolyhedronBufferGeometry, _BufferGeometry);\n\n\t\tfunction PolyhedronBufferGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\tradius = radius || 1;\n\t\t\tdetail = detail || 0; // default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\t_this.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\t\t\t\t_this.normalizeNormals(); // smooth normals\n\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (var i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tvar cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (var i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tvar aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tvar bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor (var j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (var _i = 0; _i < cols; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 2 * (cols - _i) - 1; _j++) {\n\t\t\t\t\t\tvar k = Math.floor(_j / 2);\n\n\t\t\t\t\t\tif (_j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[_i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tvar vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvar u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (var i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tvar x0 = uvBuffer[i + 0];\n\t\t\t\t\tvar x1 = uvBuffer[i + 2];\n\t\t\t\t\tvar x2 = uvBuffer[i + 4];\n\t\t\t\t\tvar max = Math.max(x0, x1, x2);\n\t\t\t\t\tvar min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tvar stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\t\t\tvar centroid = new Vector3();\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tvar azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar DodecahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(DodecahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction DodecahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar r = 1 / t;\n\t\t\tvar vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tvar indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'DodecahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar DodecahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(DodecahedronGeometry, _Geometry);\n\n\t\tfunction DodecahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'DodecahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronGeometry;\n\t}(Geometry);\n\n\tvar _v0$2 = new Vector3();\n\n\tvar _v1$5 = new Vector3();\n\n\tvar _normal$1 = new Vector3();\n\n\tvar _triangle = new Triangle();\n\n\tvar EdgesGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(EdgesGeometry, _BufferGeometry);\n\n\t\tfunction EdgesGeometry(geometry, thresholdAngle) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'EdgesGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry) {\n\t\t\t\tgeometry = new BufferGeometry().fromGeometry(geometry);\n\t\t\t}\n\n\t\t\tvar precisionPoints = 4;\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\t\t\tvar thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tvar indexAttr = geometry.getIndex();\n\t\t\tvar positionAttr = geometry.getAttribute('position');\n\t\t\tvar indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tvar indexArr = [0, 0, 0];\n\t\t\tvar vertKeys = ['a', 'b', 'c'];\n\t\t\tvar hashes = new Array(3);\n\t\t\tvar edgeData = {};\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tvar a = _triangle.a,\n\t\t\t\t\t\tb = _triangle.b,\n\t\t\t\t\t\tc = _triangle.c;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal$1); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = Math.round(a.x * precision) + \",\" + Math.round(a.y * precision) + \",\" + Math.round(a.z * precision);\n\t\t\t\thashes[1] = Math.round(b.x * precision) + \",\" + Math.round(b.y * precision) + \",\" + Math.round(b.z * precision);\n\t\t\t\thashes[2] = Math.round(c.x * precision) + \",\" + Math.round(c.y * precision) + \",\" + Math.round(c.z * precision); // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tvar jNext = (j + 1) % 3;\n\t\t\t\t\tvar vecHash0 = hashes[j];\n\t\t\t\t\tvar vecHash1 = hashes[jNext];\n\t\t\t\t\tvar v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tvar v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tvar hash = vecHash0 + \"_\" + vecHash1;\n\t\t\t\t\tvar reverseHash = vecHash1 + \"_\" + vecHash0;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal$1.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (var key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tvar _edgeData$key = edgeData[key],\n\t\t\t\t\t\t\tindex0 = _edgeData$key.index0,\n\t\t\t\t\t\t\tindex1 = _edgeData$key.index1;\n\n\t\t\t\t\t_v0$2.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$5.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0$2.x, _v0$2.y, _v0$2.z);\n\t\t\t\t\tvertices.push(_v1$5.x, _v1$5.y, _v1$5.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn EdgesGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tvar Earcut = {\n\t\ttriangulate: function triangulate(data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tvar outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tvar triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (var i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tvar i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tvar p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tvar stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tvar p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tvar p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tvar a = p.prev,\n\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\n\t\tdo {\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tvar b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tvar x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\t\tmx = m.x,\n\t\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tvar i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tvar p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tvar o1 = sign(area(p1, q1, p2));\n\t\tvar o2 = sign(area(p1, q1, q2));\n\t\tvar o3 = sign(area(p2, q2, p1));\n\t\tvar o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tvar p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tvar p = a,\n\t\t\t\tinside = false;\n\t\tvar px = (a.x + b.x) / 2,\n\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tvar a2 = new Node(a.i, a.x, a.y),\n\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\tan = a.next,\n\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tvar p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tvar sum = 0;\n\n\t\tfor (var i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tvar ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function area(contour) {\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor (var p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function triangulateShape(contour, holes) {\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tvar holeIndices = []; // array of hole indices\n\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tvar holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (var i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tvar triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (var _i = 0; _i < triangles.length; _i += 3) {\n\t\t\t\tfaces.push(triangles.slice(_i, _i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tvar l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (var i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\tvar ExtrudeBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ExtrudeBufferGeometry, _BufferGeometry);\n\n\t\tfunction ExtrudeBufferGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\n\t\t\t_this.computeVertexNormals(); // functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar placeholder = []; // options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tvar extrudePath = options.extrudePath;\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tvar extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tvar shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\t\t\t\tvar reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (var h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tvar ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n\t\t\t\t\tvar _ahole = holes[_h];\n\t\t\t\t\tvertices = vertices.concat(_ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error(\"THREE.ExtrudeGeometry: vec does not exist\");\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length,\n\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tvar v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tvar collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tvar v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tvar ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tvar ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tvar ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tvar v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor (var _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n\t\t\t\t\tvar _ahole2 = holes[_h2];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++) {\n\t\t\t\t\t\tif (_j === _il) _j = 0;\n\t\t\t\t\t\tif (_k === _il) _k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (var b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos(t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++) {\n\t\t\t\t\t\tvar vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n\t\t\t\t\t\tvar _ahole3 = holes[_h3];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h3];\n\n\t\t\t\t\t\tfor (var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++) {\n\t\t\t\t\t\t\tvar _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);\n\n\t\t\t\t\t\t\tv(_vert.x, _vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (var _i5 = 0; _i5 < vlen; _i5++) {\n\t\t\t\t\tvar _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(_vert2.x, _vert2.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (var s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (var _i6 = 0; _i6 < vlen; _i6++) {\n\t\t\t\t\t\tvar _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(_vert3.x, _vert3.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (var _b = bevelSegments - 1; _b >= 0; _b--) {\n\t\t\t\t\tvar _t = _b / bevelSegments;\n\n\t\t\t\t\tvar _z = bevelThickness * Math.cos(_t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++) {\n\t\t\t\t\t\tvar _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);\n\n\t\t\t\t\t\tv(_vert4.x, _vert4.y, depth + _z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n\t\t\t\t\t\tvar _ahole4 = holes[_h4];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h4];\n\n\t\t\t\t\t\tfor (var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++) {\n\t\t\t\t\t\t\tvar _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y, depth + _z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\n\t\t\t\t\t\tvar offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (var _i9 = 0; _i9 < flen; _i9++) {\n\t\t\t\t\t\t\tvar face = faces[_i9];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (var _i10 = 0; _i10 < flen; _i10++) {\n\t\t\t\t\t\t\tvar _face = faces[_i10];\n\t\t\t\t\t\t\tf3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (var _i11 = 0; _i11 < flen; _i11++) {\n\t\t\t\t\t\t\tvar _face2 = faces[_i11];\n\t\t\t\t\t\t\tf3(_face2[2], _face2[1], _face2[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (var _i12 = 0; _i12 < flen; _i12++) {\n\t\t\t\t\t\t\tvar _face3 = faces[_i12];\n\t\t\t\t\t\t\tf3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n\t\t\t\t\t\tvar _ahole5 = holes[_h5];\n\t\t\t\t\t\tsidewalls(_ahole5, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += _ahole5.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tvar _j2 = i;\n\n\t\t\t\t\t\tvar _k2 = i - 1;\n\n\t\t\t\t\t\tif (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (var _s = 0, sl = steps + bevelSegments * 2; _s < sl; _s++) {\n\t\t\t\t\t\t\tvar slen1 = vlen * _s;\n\t\t\t\t\t\t\tvar slen2 = vlen * (_s + 1);\n\n\t\t\t\t\t\t\tvar a = layeroffset + _j2 + slen1,\n\t\t\t\t\t\t\t\t\t_b2 = layeroffset + _k2 + slen1,\n\t\t\t\t\t\t\t\t\tc = layeroffset + _k2 + slen2,\n\t\t\t\t\t\t\t\t\td = layeroffset + _j2 + slen2;\n\n\t\t\t\t\t\t\tf4(a, _b2, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeBufferGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar WorldUVGenerator = {\n\t\tgenerateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar a_z = vertices[indexA * 3 + 2];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar b_z = vertices[indexB * 3 + 2];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\tvar c_z = vertices[indexC * 3 + 2];\n\t\t\tvar d_x = vertices[indexD * 3];\n\t\t\tvar d_y = vertices[indexD * 3 + 1];\n\t\t\tvar d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _toJSON(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar ExtrudeGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(ExtrudeGeometry, _Geometry);\n\n\t\tfunction ExtrudeGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Geometry.prototype.toJSON.call(this);\n\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON$1(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeGeometry;\n\t}(Geometry);\n\n\tfunction _toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar IcosahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(IcosahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction IcosahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tvar indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'IcosahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar IcosahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(IcosahedronGeometry, _Geometry);\n\n\t\tfunction IcosahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'IcosahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronGeometry;\n\t}(Geometry);\n\n\tvar LatheBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(LatheBufferGeometry, _BufferGeometry);\n\n\t\tfunction LatheBufferGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'LatheBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments) || 12;\n\t\t\tphiStart = phiStart || 0;\n\t\t\tphiLength = phiLength || Math.PI * 2; // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tvar sin = Math.sin(phi);\n\t\t\t\tvar cos = Math.cos(phi);\n\n\t\t\t\tfor (var j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 0; _i < segments; _i++) {\n\t\t\t\tfor (var _j = 0; _j < points.length - 1; _j++) {\n\t\t\t\t\tvar base = _j + _i * points.length;\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\n\t\t\t_this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tvar normals = _this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar _base = segments * points.length * 3;\n\n\t\t\t\tfor (var _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[_j2 + 0];\n\t\t\t\t\tn1.y = normals[_j2 + 1];\n\t\t\t\t\tn1.z = normals[_j2 + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[_base + _j2 + 0];\n\t\t\t\t\tn2.y = normals[_base + _j2 + 1];\n\t\t\t\t\tn2.z = normals[_base + _j2 + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[_j2 + 0] = normals[_base + _j2 + 0] = n.x;\n\t\t\t\t\tnormals[_j2 + 1] = normals[_base + _j2 + 1] = n.y;\n\t\t\t\t\tnormals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar LatheGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(LatheGeometry, _Geometry);\n\n\t\tfunction LatheGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'LatheGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheGeometry;\n\t}(Geometry);\n\n\tvar OctahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(OctahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction OctahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tvar vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tvar indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'OctahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar OctahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(OctahedronGeometry, _Geometry);\n\n\t\tfunction OctahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'OctahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronGeometry;\n\t}(Geometry);\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricBufferGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricBufferGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar EPS = 0.00001;\n\t\tvar normal = new Vector3();\n\t\tvar p0 = new Vector3(),\n\t\t\t\tp1 = new Vector3();\n\t\tvar pu = new Vector3(),\n\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor (var i = 0; i <= stacks; i++) {\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor (var j = 0; j <= slices; j++) {\n\t\t\t\tvar u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (var _i = 0; _i < stacks; _i++) {\n\t\t\tfor (var _j = 0; _j < slices; _j++) {\n\t\t\t\tvar a = _i * sliceCount + _j;\n\t\t\t\tvar b = _i * sliceCount + _j + 1;\n\t\t\t\tvar c = (_i + 1) * sliceCount + _j + 1;\n\t\t\t\tvar d = (_i + 1) * sliceCount + _j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\t\tthis.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));\n\t\tthis.mergeVertices();\n\t}\n\n\tParametricGeometry.prototype = Object.create(Geometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tvar PlaneGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(PlaneGeometry, _Geometry);\n\n\t\tfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'PlaneGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneGeometry;\n\t}(Geometry);\n\n\tvar PolyhedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(PolyhedronGeometry, _Geometry);\n\n\t\tfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronGeometry;\n\t}(Geometry);\n\n\tvar RingBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(RingBufferGeometry, _BufferGeometry);\n\n\t\tfunction RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'RingBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tinnerRadius = innerRadius || 0.5;\n\t\t\touterRadius = outerRadius || 1;\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\t\tthetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;\n\t\t\tphiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (var _j = 0; _j < phiSegments; _j++) {\n\t\t\t\tvar thetaSegmentLevel = _j * (thetaSegments + 1);\n\n\t\t\t\tfor (var _i = 0; _i < thetaSegments; _i++) {\n\t\t\t\t\tvar _segment = _i + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = _segment;\n\t\t\t\t\tvar b = _segment + thetaSegments + 1;\n\t\t\t\t\tvar c = _segment + thetaSegments + 2;\n\t\t\t\t\tvar d = _segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar RingGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(RingGeometry, _Geometry);\n\n\t\tfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'RingGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingGeometry;\n\t}(Geometry);\n\n\tvar ShapeBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ShapeBufferGeometry, _BufferGeometry);\n\n\t\tfunction ShapeBufferGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ShapeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t};\n\t\t\tcurveSegments = curveSegments || 12; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\n\t\t\t\t\t_this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints(curveSegments);\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (var _i = 0, l = shapeHoles.length; _i < l; _i++) {\n\t\t\t\t\tvar shapeHole = shapeHoles[_i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[_i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (var _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++) {\n\t\t\t\t\tvar _shapeHole = shapeHoles[_i2];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(_shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++) {\n\t\t\t\t\tvar vertex = shapeVertices[_i3];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++) {\n\t\t\t\t\tvar face = faces[_i4];\n\t\t\t\t\tvar a = face[0] + indexOffset;\n\t\t\t\t\tvar b = face[1] + indexOffset;\n\t\t\t\t\tvar c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeBufferGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$2(shapes, data);\n\t\t};\n\n\t\treturn ShapeBufferGeometry;\n\t}(BufferGeometry);\n\n\tfunction _toJSON$2(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar ShapeGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(ShapeGeometry, _Geometry);\n\n\t\tfunction ShapeGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'ShapeGeometry';\n\n\t\t\tif (typeof curveSegments === 'object') {\n\t\t\t\tconsole.warn('THREE.ShapeGeometry: Options parameter has been removed.');\n\t\t\t\tcurveSegments = curveSegments.curveSegments;\n\t\t\t}\n\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = Geometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$3(shapes, data);\n\t\t};\n\n\t\treturn ShapeGeometry;\n\t}(Geometry);\n\n\tfunction _toJSON$3(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar SphereBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(SphereBufferGeometry, _BufferGeometry);\n\n\t\tfunction SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'SphereBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tradius = radius || 1;\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments) || 8);\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments) || 6);\n\t\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\t\tvar thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tvar verticesRow = [];\n\t\t\t\tvar v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (var ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tvar u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < heightSegments; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < widthSegments; _ix++) {\n\t\t\t\t\tvar a = grid[_iy][_ix + 1];\n\t\t\t\t\tvar b = grid[_iy][_ix];\n\t\t\t\t\tvar c = grid[_iy + 1][_ix];\n\t\t\t\t\tvar d = grid[_iy + 1][_ix + 1];\n\t\t\t\t\tif (_iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (_iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar SphereGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(SphereGeometry, _Geometry);\n\n\t\tfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'SphereGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereGeometry;\n\t}(Geometry);\n\n\tvar TetrahedronBufferGeometry = /*#__PURE__*/function (_PolyhedronBufferGeom) {\n\t\t_inheritsLoose(TetrahedronBufferGeometry, _PolyhedronBufferGeom);\n\n\t\tfunction TetrahedronBufferGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tvar vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tvar indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\t_this = _PolyhedronBufferGeom.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'TetrahedronBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronBufferGeometry;\n\t}(PolyhedronBufferGeometry);\n\n\tvar TetrahedronGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TetrahedronGeometry, _Geometry);\n\n\t\tfunction TetrahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TetrahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronGeometry;\n\t}(Geometry);\n\n\tvar TextBufferGeometry = /*#__PURE__*/function (_ExtrudeBufferGeometr) {\n\t\t_inheritsLoose(TextBufferGeometry, _ExtrudeBufferGeometr);\n\n\t\tfunction TextBufferGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\tparameters = parameters || {};\n\t\t\tvar font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry() || _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\t_this = _ExtrudeBufferGeometr.call(this, shapes, parameters) || this;\n\t\t\t_this.type = 'TextBufferGeometry';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextBufferGeometry;\n\t}(ExtrudeBufferGeometry);\n\n\tvar TextGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TextGeometry, _Geometry);\n\n\t\tfunction TextGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TextGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\ttext: text,\n\t\t\t\tparameters: parameters\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new TextBufferGeometry(text, parameters));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextGeometry;\n\t}(Geometry);\n\n\tvar TorusBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusBufferGeometry, _BufferGeometry);\n\n\t\tfunction TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradius = radius || 1;\n\t\t\ttube = tube || 0.4;\n\t\t\tradialSegments = Math.floor(radialSegments) || 8;\n\t\t\ttubularSegments = Math.floor(tubularSegments) || 6;\n\t\t\tarc = arc || Math.PI * 2; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= radialSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= tubularSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (tubularSegments + 1) * _j + _i - 1;\n\t\t\t\t\tvar b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n\t\t\t\t\tvar c = (tubularSegments + 1) * (_j - 1) + _i;\n\t\t\t\t\tvar d = (tubularSegments + 1) * _j + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TorusGeometry, _Geometry);\n\n\t\tfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TorusGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\n\t\t\t_this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusGeometry;\n\t}(Geometry);\n\n\tvar TorusKnotBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusKnotBufferGeometry, _BufferGeometry);\n\n\t\tfunction TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\tradius = radius || 1;\n\t\t\ttube = tube || 0.4;\n\t\t\ttubularSegments = Math.floor(tubularSegments) || 64;\n\t\t\tradialSegments = Math.floor(radialSegments) || 8;\n\t\t\tp = p || 2;\n\t\t\tq = q || 3; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = -tube * Math.cos(v);\n\t\t\t\t\tvar cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= tubularSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= radialSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (radialSegments + 1) * (_j - 1) + (_i - 1);\n\t\t\t\t\tvar b = (radialSegments + 1) * _j + (_i - 1);\n\t\t\t\t\tvar c = (radialSegments + 1) * _j + _i;\n\t\t\t\t\tvar d = (radialSegments + 1) * (_j - 1) + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tvar cu = Math.cos(u);\n\t\t\t\tvar su = Math.sin(u);\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusKnotGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TorusKnotGeometry, _Geometry);\n\n\t\tfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\tif (heightScale !== undefined) console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');\n\n\t\t\t_this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotGeometry;\n\t}(Geometry);\n\n\tvar TubeBufferGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TubeBufferGeometry, _BufferGeometry);\n\n\t\tfunction TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TubeBufferGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\ttubularSegments = tubularSegments || 64;\n\t\t\tradius = radius || 1;\n\t\t\tradialSegments = radialSegments || 8;\n\t\t\tclosed = closed || false;\n\t\t\tvar frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\t_this.tangents = frames.tangents;\n\t\t\t_this.normals = frames.normals;\n\t\t\t_this.binormals = frames.binormals; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3(); // buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (var i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[i];\n\t\t\t\tvar B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar sin = Math.sin(v);\n\t\t\t\t\tvar cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (var j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (var i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tvar a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tvar b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tvar c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tvar d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = TubeBufferGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn TubeBufferGeometry;\n\t}(BufferGeometry);\n\n\tvar TubeGeometry = /*#__PURE__*/function (_Geometry) {\n\t\t_inheritsLoose(TubeGeometry, _Geometry);\n\n\t\tfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Geometry.call(this) || this;\n\t\t\t_this.type = 'TubeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tif (taper !== undefined) console.warn('THREE.TubeGeometry: taper has been removed.');\n\t\t\tvar bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed); // expose internals\n\n\t\t\t_this.tangents = bufferGeometry.tangents;\n\t\t\t_this.normals = bufferGeometry.normals;\n\t\t\t_this.binormals = bufferGeometry.binormals; // create geometry\n\n\t\t\t_this.fromBufferGeometry(bufferGeometry);\n\n\t\t\t_this.mergeVertices();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TubeGeometry;\n\t}(Geometry);\n\n\tvar WireframeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(WireframeGeometry, _BufferGeometry);\n\n\t\tfunction WireframeGeometry(geometry) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'WireframeGeometry'; // buffer\n\n\t\t\tvar vertices = []; // helper variables\n\n\t\t\tvar edge = [0, 0],\n\t\t\t\t\tedges = {};\n\t\t\tvar keys = ['a', 'b', 'c']; // different logic for Geometry and BufferGeometry\n\n\t\t\tif (geometry && geometry.isGeometry) {\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\t\t\t\tvar faces = geometry.faces;\n\n\t\t\t\tfor (var i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tvar face = faces[i];\n\n\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t\tvar edge1 = face[keys[j]];\n\t\t\t\t\t\tvar edge2 = face[keys[(j + 1) % 3]];\n\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\tvar key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (var _key in edges) {\n\t\t\t\t\tvar e = edges[_key];\n\t\t\t\t\tvar vertex = geometry.vertices[e.index1];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex = geometry.vertices[e.index2];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else if (geometry && geometry.isBufferGeometry) {\n\t\t\t\tvar _vertex = new Vector3();\n\n\t\t\t\tif (geometry.index !== null) {\n\t\t\t\t\t// indexed BufferGeometry\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar indices = geometry.index;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\t\tgroups = [{\n\t\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t\t}];\n\t\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\t\tfor (var o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\t\tvar group = groups[o];\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor (var _i = start, _l = start + count; _i < _l; _i += 3) {\n\t\t\t\t\t\t\tfor (var _j = 0; _j < 3; _j++) {\n\t\t\t\t\t\t\t\tvar _edge = indices.getX(_i + _j);\n\n\t\t\t\t\t\t\t\tvar _edge2 = indices.getX(_i + (_j + 1) % 3);\n\n\t\t\t\t\t\t\t\tedge[0] = Math.min(_edge, _edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\t\tedge[1] = Math.max(_edge, _edge2);\n\n\t\t\t\t\t\t\t\tvar _key2 = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\t\tif (edges[_key2] === undefined) {\n\t\t\t\t\t\t\t\t\tedges[_key2] = {\n\t\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // generate vertices\n\n\n\t\t\t\t\tfor (var _key3 in edges) {\n\t\t\t\t\t\tvar _e = edges[_key3];\n\n\t\t\t\t\t\t_vertex.fromBufferAttribute(position, _e.index1);\n\n\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\n\t\t\t\t\t\t_vertex.fromBufferAttribute(position, _e.index2);\n\n\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\t\tvar _position = geometry.attributes.position;\n\n\t\t\t\t\tfor (var _i2 = 0, _l2 = _position.count / 3; _i2 < _l2; _i2++) {\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < 3; _j2++) {\n\t\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\t\tvar index1 = 3 * _i2 + _j2;\n\n\t\t\t\t\t\t\t_vertex.fromBufferAttribute(_position, index1);\n\n\t\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\t\t\t\t\t\t\tvar index2 = 3 * _i2 + (_j2 + 1) % 3;\n\n\t\t\t\t\t\t\t_vertex.fromBufferAttribute(_position, index2);\n\n\t\t\t\t\t\t\tvertices.push(_vertex.x, _vertex.y, _vertex.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn WireframeGeometry;\n\t}(BufferGeometry);\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShadowMaterial';\n\t\tthis.color = new Color(0x000000);\n\t\tthis.transparent = true;\n\t\tthis.setValues(parameters);\n\t}\n\n\tShadowMaterial.prototype = Object.create(Material.prototype);\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\treturn this;\n\t};\n\n\tfunction RawShaderMaterial(parameters) {\n\t\tShaderMaterial.call(this, parameters);\n\t\tthis.type = 'RawShaderMaterial';\n\t}\n\n\tRawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function get() {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function set(ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshPhongMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.specular = new Color(0x111111);\n\t\tthis.shininess = 30;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create(Material.prototype);\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.specular.copy(source.specular);\n\t\tthis.shininess = source.shininess;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'TOON': ''\n\t\t};\n\t\tthis.type = 'MeshToonMaterial';\n\t\tthis.color = new Color(0xffffff);\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshToonMaterial.prototype = Object.create(Material.prototype);\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshNormalMaterial';\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create(Material.prototype);\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'MeshLambertMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.specularMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create(Material.prototype);\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.color.copy(source.color);\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.type = 'MeshMatcapMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.matcap = null;\n\t\tthis.map = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.alphaMap = null;\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create(Material.prototype);\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'MATCAP': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.matcap = source.matcap;\n\t\tthis.map = source.map;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial(parameters) {\n\t\tLineBasicMaterial.call(this);\n\t\tthis.type = 'LineDashedMaterial';\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\t\tthis.setValues(parameters);\n\t}\n\n\tLineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function (source) {\n\t\tLineBasicMaterial.prototype.copy.call(this, source);\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\t\treturn this;\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function arraySlice(array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function convertArray(array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function isTypedArray(object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function getKeyframeOrder(times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array(n);\n\n\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\tresult[i] = i;\n\t\t\t}\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function sortedArray(values, stride, order) {\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor(nValues);\n\n\t\t\tfor (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tvar srcOffset = order[i] * stride;\n\n\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n\t\t\tvar i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tvar value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function subclip(sourceClip, name, startFrame, endFrame, fps) {\n\t\t\tfps = fps || 30;\n\t\t\tvar clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tvar track = clip.tracks[i];\n\t\t\t\tvar valueSize = track.getValueSize();\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tvar frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (var k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor (var _i = 0; _i < clip.tracks.length; ++_i) {\n\t\t\t\tif (minStartTime > clip.tracks[_i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[_i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (var _i2 = 0; _i2 < clip.tracks.length; ++_i2) {\n\t\t\t\tclip.tracks[_i2].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function makeClipAdditive(targetClip, referenceFrame, referenceClip, fps) {\n\t\t\tif (referenceFrame === undefined) referenceFrame = 0;\n\t\t\tif (referenceClip === undefined) referenceClip = targetClip;\n\t\t\tif (fps === undefined || fps <= 0) fps = 30;\n\t\t\tvar numTracks = referenceClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tvar _loop = function _loop(i) {\n\t\t\t\tvar referenceTrack = referenceClip.tracks[i];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') return \"continue\"; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tvar targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) return \"continue\";\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = void 0; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar _startIndex = lastIndex * referenceValueSize + referenceOffset;\n\n\t\t\t\t\tvar _endIndex = _startIndex + referenceValueSize - referenceOffset;\n\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar _startIndex2 = referenceOffset;\n\n\t\t\t\t\tvar _endIndex2 = referenceValueSize - referenceOffset;\n\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (var j = 0; j < numTimes; ++j) {\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (var k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < numTracks; ++i) {\n\t\t\t\tvar _ret = _loop(i);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function evaluate(t) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (var giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tvar t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (var _giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === _giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tvar mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function getSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function copySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function interpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function intervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function intervalChanged_(i1, t0, t1) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tvar sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tvar s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function interpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tfunction KeyframeTrack(name, times, values, interpolation) {\n\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\tthis.name = name;\n\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t} // Static methods\n\n\n\tObject.assign(KeyframeTrack, {\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\t\ttoJSON: function toJSON(track) {\n\t\t\tvar trackType = track.constructor;\n\t\t\tvar json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== undefined) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\t});\n\tObject.assign(KeyframeTrack.prototype, {\n\t\tconstructor: KeyframeTrack,\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tsetInterpolation: function setInterpolation(interpolation) {\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tvar message = \"unsupported interpolation for \" + this.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t},\n\t\tgetInterpolation: function getInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t},\n\t\tgetValueSize: function getValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t},\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function shift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function scale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function trim(startTime, endTime) {\n\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length;\n\t\t\tvar from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\t\t\tvar valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor (var i = 0; i !== nKeys; i++) {\n\t\t\t\tvar currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (var _i = 0, n = values.length; _i !== n; ++_i) {\n\t\t\t\t\t\tvar value = values[_i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function optimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor (var i = 1; i < lastIndex; ++i) {\n\t\t\t\tvar keep = false;\n\t\t\t\tvar time = times[i];\n\t\t\t\tvar timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== time[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvar value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (var _j = 0; _j !== stride; ++_j) {\n\t\t\t\t\t\t\tvalues[writeOffset + _j] = values[readOffset + _j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2) {\n\t\t\t\t\tvalues[_writeOffset + _j2] = values[_readOffset + _j2];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tvar values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tfunction BooleanKeyframeTrack(name, times, values) {\n\t\tKeyframeTrack.call(this, name, times, values);\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: BooleanKeyframeTrack,\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t});\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tfunction ColorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: ColorKeyframeTrack,\n\t\tValueTypeName: 'color' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t});\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tfunction NumberKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: NumberKeyframeTrack,\n\t\tValueTypeName: 'number' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor (var end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tfunction QuaternionKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: QuaternionKeyframeTrack,\n\t\tValueTypeName: 'quaternion',\n\t\t// ValueBufferType is inherited\n\t\tDefaultInterpolation: InterpolateLinear,\n\t\tInterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t},\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t});\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tfunction StringKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: StringKeyframeTrack,\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\t});\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tfunction VectorKeyframeTrack(name, times, values, interpolation) {\n\t\tKeyframeTrack.call(this, name, times, values, interpolation);\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n\t\tconstructor: VectorKeyframeTrack,\n\t\tValueTypeName: 'vector' // ValueBufferType is inherited\n\t\t// DefaultInterpolation is inherited\n\n\t});\n\n\tfunction AnimationClip(name, duration, tracks, blendMode) {\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration !== undefined ? duration : -1;\n\t\tthis.blendMode = blendMode !== undefined ? blendMode : NormalAnimationBlendMode;\n\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\tif (this.duration < 0) {\n\t\t\tthis.resetDuration();\n\t\t}\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tvar times = [],\n\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tObject.assign(AnimationClip, {\n\t\tparse: function parse(json) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\treturn new AnimationClip(json.name, json.duration, tracks, json.blendMode);\n\t\t},\n\t\ttoJSON: function toJSON(clip) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tvar json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (var i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t},\n\t\tCreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < numMorphTargets; i++) {\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new AnimationClip(name, -1, tracks);\n\t\t},\n\t\tfindByName: function findByName(objectOrClipArray, name) {\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\tCreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tvar animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (var i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\tvar parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tvar name = parts[1];\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor (var _name in animationToMorphTargets) {\n\t\t\t\tclips.push(AnimationClip.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t},\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (var h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tvar animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tvar k = void 0;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (var morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tvar boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\t});\n\tObject.assign(AnimationClip.prototype, {\n\t\tresetDuration: function resetDuration() {\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor (var i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tvar track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t},\n\t\ttrim: function trim() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tvalidate: function validate() {\n\t\t\tvar valid = true;\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t},\n\t\toptimize: function optimize() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new AnimationClip(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\t});\n\n\tvar Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function add(key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function get(key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function remove(key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function clear() {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tvar scope = this;\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tvar index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tvar regex = handlers[i];\n\t\t\t\tvar loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function load()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function loadAsync(url, onProgress) {\n\t\t\tvar scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function parse()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function setCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function setWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function setResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function setRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tvar request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tvar view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tvar response = this.response;\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (var _i = 0, il = callbacks.length; _i < il; _i++) {\n\t\t\t\t\t\t\tvar callback = callbacks[_i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++) {\n\t\t\t\t\t\t\tvar _callback = callbacks[_i2];\n\t\t\t\t\t\t\tif (_callback.onError) _callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\n\t\t\t\t\tfor (var _i3 = 0, il = callbacks.length; _i3 < il; _i3++) {\n\t\t\t\t\t\tvar callback = callbacks[_i3];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i4 = 0, il = callbacks.length; _i4 < il; _i4++) {\n\t\t\t\t\t\tvar callback = callbacks[_i4];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i5 = 0, il = callbacks.length; _i5 < il; _i5++) {\n\t\t\t\t\t\tvar callback = callbacks[_i5];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (var header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function setResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function setMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AnimationLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AnimationLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar images = [];\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (var i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (var f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (var _i = 0; _i < texDatas.mipmapCount; _i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction ImageLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\t});\n\n\tfunction CubeTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CubeTextureLoader,\n\t\tload: function load(urls, onLoad, onProgress, onError) {\n\t\t\tvar texture = new CubeTexture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar texture = new DataTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tvar texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar texture = new Texture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tvar isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function getPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function getPointAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === undefined) divisions = 5;\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === undefined) divisions = 5;\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function getLength() {\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function getLengths(divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tvar cache = [];\n\t\t\tvar current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tvar sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (var p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function getUtoTmapping(u, distance) {\n\t\t\tvar arcLengths = this.getLengths();\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tvar low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tvar lengthBefore = arcLengths[i];\n\t\t\tvar lengthAfter = arcLengths[i + 1];\n\t\t\tvar segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tvar t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function getTangent(t, optionalTarget) {\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tvar pt1 = this.getPoint(t1);\n\t\t\tvar pt2 = this.getPoint(t2);\n\t\t\tvar tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function getTangentAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function computeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tvar normal = new Vector3();\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs(tangents[0].x);\n\t\t\tvar ty = Math.abs(tangents[0].y);\n\t\t\tvar tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tnormals[_i] = normals[_i - 1].clone();\n\t\t\t\tbinormals[_i] = binormals[_i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[_i - 1], tangents[_i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tvar theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[_i].crossVectors(tangents[_i], normals[_i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tvar _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\n\t\t\t\t_theta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\t_theta = -_theta;\n\t\t\t\t}\n\n\t\t\t\tfor (var _i2 = 1; _i2 <= segments; _i2++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2));\n\n\t\t\t\t\tbinormals[_i2].crossVectors(tangents[_i2], normals[_i2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\tCurve.call(this);\n\t\tthis.type = 'EllipseCurve';\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\t\tthis.aClockwise = aClockwise || false;\n\t\tthis.aRotation = aRotation || 0;\n\t}\n\n\tEllipseCurve.prototype = Object.create(Curve.prototype);\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\twhile (deltaAngle < 0) {\n\t\t\tdeltaAngle += twoPi;\n\t\t}\n\n\t\twhile (deltaAngle > twoPi) {\n\t\t\tdeltaAngle -= twoPi;\n\t\t}\n\n\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\tif (samePoints) {\n\t\t\t\tdeltaAngle = 0;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = twoPi;\n\t\t\t}\n\t\t}\n\n\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t} else {\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t}\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos(angle);\n\t\tvar y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\tif (this.aRotation !== 0) {\n\t\t\tvar cos = Math.cos(this.aRotation);\n\t\t\tvar sin = Math.sin(this.aRotation);\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t}\n\n\t\treturn point.set(x, y);\n\t};\n\n\tEllipseCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\t\tthis.aClockwise = source.aClockwise;\n\t\tthis.aRotation = source.aRotation;\n\t\treturn this;\n\t};\n\n\tEllipseCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\t\tdata.aClockwise = this.aClockwise;\n\t\tdata.aRotation = this.aRotation;\n\t\treturn data;\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\t\tthis.aClockwise = json.aClockwise;\n\t\tthis.aRotation = json.aRotation;\n\t\treturn this;\n\t};\n\n\tfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\tEllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\tthis.type = 'ArcCurve';\n\t}\n\n\tArcCurve.prototype = Object.create(EllipseCurve.prototype);\n\tArcCurve.prototype.constructor = ArcCurve;\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tvar c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tvar t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function calc(t) {\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\tfunction CatmullRomCurve3(points, closed, curveType, tension) {\n\t\tCurve.call(this);\n\t\tthis.type = 'CatmullRomCurve3';\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension !== undefined ? tension : 0.5;\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create(Curve.prototype);\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector3();\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\t\tvar p = (l - (this.closed ? 0 : 1)) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\n\t\tif (this.closed) {\n\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\t\t}\n\n\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif (this.closed || intPoint > 0) {\n\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t} else {\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\tp0 = tmp;\n\t\t}\n\n\t\tvar p1 = points[intPoint % l];\n\t\tvar p2 = points[(intPoint + 1) % l];\n\n\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t} else {\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\tp3 = tmp;\n\t\t}\n\n\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\tvar dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\tvar dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t}\n\n\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\treturn point;\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\t\treturn this;\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\t\treturn data;\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tvar v0 = (p2 - p0) * 0.5;\n\t\tvar v1 = (p3 - p1) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tfunction CubicBezierCurve(v0, v1, v2, v3) {\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve';\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\t}\n\n\tCubicBezierCurve.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction CubicBezierCurve3(v0, v1, v2, v3) {\n\t\tCurve.call(this);\n\t\tthis.type = 'CubicBezierCurve3';\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create(Curve.prototype);\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector3();\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2,\n\t\t\t\tv3 = this.v3;\n\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\treturn point;\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\tthis.v3.copy(source.v3);\n\t\treturn this;\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\t\treturn data;\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\tthis.v3.fromArray(json.v3);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve(v1, v2) {\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve';\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t}\n\n\tLineCurve.prototype = Object.create(Curve.prototype);\n\tLineCurve.prototype.constructor = LineCurve;\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve.prototype.getTangent = function (t, optionalTarget) {\n\t\tvar tangent = optionalTarget || new Vector2();\n\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\treturn tangent;\n\t};\n\n\tLineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction LineCurve3(v1, v2) {\n\t\tCurve.call(this);\n\t\tthis.type = 'LineCurve3';\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t}\n\n\tLineCurve3.prototype = Object.create(Curve.prototype);\n\tLineCurve3.prototype.constructor = LineCurve3;\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif (t === 1) {\n\t\t\tpoint.copy(this.v2);\n\t\t} else {\n\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t}\n\n\t\treturn point;\n\t}; // Line curve is linear, so we can overwrite default getPointAt\n\n\n\tLineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n\t\treturn this.getPoint(u, optionalTarget);\n\t};\n\n\tLineCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tLineCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve(v0, v1, v2) {\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve';\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction QuadraticBezierCurve3(v0, v1, v2) {\n\t\tCurve.call(this);\n\t\tthis.type = 'QuadraticBezierCurve3';\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create(Curve.prototype);\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector3();\n\t\tvar v0 = this.v0,\n\t\t\t\tv1 = this.v1,\n\t\t\t\tv2 = this.v2;\n\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\treturn point;\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.v0.copy(source.v0);\n\t\tthis.v1.copy(source.v1);\n\t\tthis.v2.copy(source.v2);\n\t\treturn this;\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\treturn data;\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.v0.fromArray(json.v0);\n\t\tthis.v1.fromArray(json.v1);\n\t\tthis.v2.fromArray(json.v2);\n\t\treturn this;\n\t};\n\n\tfunction SplineCurve(points) {\n\t\tCurve.call(this);\n\t\tthis.type = 'SplineCurve';\n\t\tthis.points = points || [];\n\t}\n\n\tSplineCurve.prototype = Object.create(Curve.prototype);\n\tSplineCurve.prototype.constructor = SplineCurve;\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n\t\tvar point = optionalTarget || new Vector2();\n\t\tvar points = this.points;\n\t\tvar p = (points.length - 1) * t;\n\t\tvar intPoint = Math.floor(p);\n\t\tvar weight = p - intPoint;\n\t\tvar p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\tvar p1 = points[intPoint];\n\t\tvar p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\tvar p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\treturn point;\n\t};\n\n\tSplineCurve.prototype.copy = function (source) {\n\t\tCurve.prototype.copy.call(this, source);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\tvar point = source.points[i];\n\t\t\tthis.points.push(point.clone());\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\tdata.points = [];\n\n\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\tvar point = this.points[i];\n\t\t\tdata.points.push(point.toArray());\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tSplineCurve.prototype.fromJSON = function (json) {\n\t\tCurve.prototype.fromJSON.call(this, json);\n\t\tthis.points = [];\n\n\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\tvar point = json.points[i];\n\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\t\tCurve.call(this);\n\t\tthis.type = 'CurvePath';\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\t}\n\n\tCurvePath.prototype = Object.assign(Object.create(Curve.prototype), {\n\t\tconstructor: CurvePath,\n\t\tadd: function add(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t},\n\t\tclosePath: function closePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[0].getPoint(0);\n\t\t\tvar endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t},\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\tgetPoint: function getPoint(t) {\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tvar diff = curveLengths[i] - d;\n\t\t\t\t\tvar curve = this.curves[i];\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t},\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\tgetLength: function getLength() {\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t},\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t},\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\tgetCurveLengths: function getCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t},\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === undefined) divisions = 40;\n\t\t\tvar points = [];\n\n\t\t\tfor (var i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tdivisions = divisions || 12;\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor (var i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tvar resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tvar pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (var j = 0; j < pts.length; j++) {\n\t\t\t\t\tvar point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurve.prototype.copy.call(this, source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tvar curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Curve.prototype.toJSON.call(this);\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tvar curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurve.prototype.fromJSON.call(this, json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tvar curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Path(points) {\n\t\tCurvePath.call(this);\n\t\tthis.type = 'Path';\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif (points) {\n\t\t\tthis.setFromPoints(points);\n\t\t}\n\t}\n\n\tPath.prototype = Object.assign(Object.create(CurvePath.prototype), {\n\t\tconstructor: Path,\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (var i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tvar curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tvar curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tvar curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tvar npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tvar curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t},\n\t\tarc: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tabsarc: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t},\n\t\tellipse: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t},\n\t\tabsellipse: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tvar lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tCurvePath.prototype.copy.call(this, source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = CurvePath.prototype.toJSON.call(this);\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tCurvePath.prototype.fromJSON.call(this, json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Shape(points) {\n\t\tPath.call(this, points);\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.type = 'Shape';\n\t\tthis.holes = [];\n\t}\n\n\tShape.prototype = Object.assign(Object.create(Path.prototype), {\n\t\tconstructor: Shape,\n\t\tgetPointsHoles: function getPointsHoles(divisions) {\n\t\t\tvar holesPts = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t},\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\t\textractPoints: function extractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tPath.prototype.copy.call(this, source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tvar hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = Path.prototype.toJSON.call(this);\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tvar hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tPath.prototype.fromJSON.call(this, json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tvar hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Light(color, intensity) {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Light';\n\t\tthis.color = new Color(color);\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\t}\n\n\tLight.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Light,\n\t\tisLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction HemisphereLight(skyColor, groundColor, intensity) {\n\t\tLight.call(this, skyColor, intensity);\n\t\tthis.type = 'HemisphereLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.groundColor = new Color(groundColor);\n\t}\n\n\tHemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: HemisphereLight,\n\t\tisHemisphereLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction LightShadow(camera) {\n\t\tthis.camera = camera;\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.mapSize = new Vector2(512, 512);\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2(1, 1);\n\t\tthis._viewportCount = 1;\n\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t}\n\n\tObject.assign(LightShadow.prototype, {\n\t\t_projScreenMatrix: new Matrix4(),\n\t\t_lightPositionWorld: new Vector3(),\n\t\t_lookTarget: new Vector3(),\n\t\tgetViewportCount: function getViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t},\n\t\tgetFrustum: function getFrustum() {\n\t\t\treturn this._frustum;\n\t\t},\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tshadowCamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\tshadowCamera.lookAt(lookTarget);\n\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\tprojScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t},\n\t\tgetViewport: function getViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t},\n\t\tgetFrameExtents: function getFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\t});\n\n\tfunction SpotLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));\n\t\tthis.focus = 1;\n\t}\n\n\tSpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: SpotLightShadow,\n\t\tisSpotLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tvar camera = this.camera;\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'SpotLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.angle = angle !== undefined ? angle : Math.PI / 3;\n\t\tthis.penumbra = penumbra !== undefined ? penumbra : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\t}\n\n\tSpotLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: SpotLight,\n\t\tisSpotLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction PointLightShadow() {\n\t\tLightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));\n\t\tthis._frameExtents = new Vector2(4, 2);\n\t\tthis._viewportCount = 6;\n\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t// following orientation:\n\t\t//\n\t\t//\txzXZ\n\t\t//\t y Y\n\t\t//\n\t\t// X - Positive x direction\n\t\t// x - Negative x direction\n\t\t// Y - Positive y direction\n\t\t// y - Negative y direction\n\t\t// Z - Positive z direction\n\t\t// z - Negative z direction\n\t\t// positive X\n\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\tnew Vector4(1, 0, 1, 1)];\n\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t}\n\n\tPointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: PointLightShadow,\n\t\tisPointLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light, viewportIndex) {\n\t\t\tif (viewportIndex === undefined) viewportIndex = 0;\n\t\t\tvar camera = this.camera,\n\t\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\t\t\tlightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\t\t\tcamera.position.copy(lightPositionWorld);\n\t\t\tlookTarget.copy(camera.position);\n\t\t\tlookTarget.add(this._cubeDirections[viewportIndex]);\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);\n\t\t\tprojScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(projScreenMatrix);\n\t\t}\n\t});\n\n\tfunction PointLight(color, intensity, distance, decay) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'PointLight';\n\t\tObject.defineProperty(this, 'power', {\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t\t}\n\t\t});\n\t\tthis.distance = distance !== undefined ? distance : 0;\n\t\tthis.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\t}\n\n\tPointLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: PointLight,\n\t\tisPointLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction OrthographicCamera(left, right, top, bottom, near, far) {\n\t\tCamera.call(this);\n\t\tthis.type = 'OrthographicCamera';\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\t\tthis.left = left !== undefined ? left : -1;\n\t\tthis.right = right !== undefined ? right : 1;\n\t\tthis.top = top !== undefined ? top : 1;\n\t\tthis.bottom = bottom !== undefined ? bottom : -1;\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tOrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: OrthographicCamera,\n\t\tisOrthographicCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t},\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tvar dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tvar cx = (this.right + this.left) / 2;\n\t\t\tvar cy = (this.top + this.bottom) / 2;\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.getInverse(this.projectionMatrix);\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction DirectionalLightShadow() {\n\t\tLightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n\t\tconstructor: DirectionalLightShadow,\n\t\tisDirectionalLightShadow: true,\n\t\tupdateMatrices: function updateMatrices(light) {\n\t\t\tLightShadow.prototype.updateMatrices.call(this, light);\n\t\t}\n\t});\n\n\tfunction DirectionalLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'DirectionalLight';\n\t\tthis.position.copy(Object3D.DefaultUp);\n\t\tthis.updateMatrix();\n\t\tthis.target = new Object3D();\n\t\tthis.shadow = new DirectionalLightShadow();\n\t}\n\n\tDirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: DirectionalLight,\n\t\tisDirectionalLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction AmbientLight(color, intensity) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'AmbientLight';\n\t}\n\n\tAmbientLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: AmbientLight,\n\t\tisAmbientLight: true\n\t});\n\n\tfunction RectAreaLight(color, intensity, width, height) {\n\t\tLight.call(this, color, intensity);\n\t\tthis.type = 'RectAreaLight';\n\t\tthis.width = width !== undefined ? width : 10;\n\t\tthis.height = height !== undefined ? height : 10;\n\t}\n\n\tRectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: RectAreaLight,\n\t\tisRectAreaLight: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = /*#__PURE__*/function () {\n\t\tfunction SphericalHarmonics3() {\n\t\t\tObject.defineProperty(this, 'isSphericalHarmonics3', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = SphericalHarmonics3.prototype;\n\n\t\t_proto.set = function set(coefficients) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.zero = function zero() {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\t;\n\n\t\t_proto.getAt = function getAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\t;\n\n\t\t_proto.getIrradianceAt = function getIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.add = function add(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledSH = function addScaledSH(sh, s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(sh, alpha) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.copy = function copy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === undefined) array = [];\n\t\t\tif (offset === undefined) offset = 0;\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\t;\n\n\t\tSphericalHarmonics3.getBasisAt = function getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t};\n\n\t\treturn SphericalHarmonics3;\n\t}();\n\n\tfunction LightProbe(sh, intensity) {\n\t\tLight.call(this, undefined, intensity);\n\t\tthis.type = 'LightProbe';\n\t\tthis.sh = sh !== undefined ? sh : new SphericalHarmonics3();\n\t}\n\n\tLightProbe.prototype = Object.assign(Object.create(Light.prototype), {\n\t\tconstructor: LightProbe,\n\t\tisLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Light.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction MaterialLoader(manager) {\n\t\tLoader.call(this, manager);\n\t\tthis.textures = {};\n\t}\n\n\tMaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: MaterialLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tvar material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (var name in json.uniforms) {\n\t\t\t\t\tvar uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (var key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t},\n\t\tsetTextures: function setTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar LoaderUtils = {\n\t\tdecodeText: function decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tvar s = '';\n\n\t\t\tfor (var i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tvar index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction BufferGeometryLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: BufferGeometryLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tvar buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tvar array = new TYPED_ARRAYS[interleavedBuffer.type](buffer);\n\t\t\t\tvar ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tvar ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tvar index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[index.type](index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar bufferAttribute = void 0;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tvar _typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);\n\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (var _key in morphAttributes) {\n\t\t\t\t\tvar attributeArray = morphAttributes[_key];\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tvar _attribute = attributeArray[i];\n\n\t\t\t\t\t\tvar _bufferAttribute = void 0;\n\n\t\t\t\t\t\tif (_attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);\n\n\t\t\t\t\t\t\t_bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _typedArray2 = new TYPED_ARRAYS[_attribute.type](_attribute.array);\n\n\t\t\t\t\t\t\t_bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_attribute.name !== undefined) _bufferAttribute.name = _attribute.name;\n\t\t\t\t\t\tarray.push(_bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[_key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (var _i = 0, n = groups.length; _i !== n; ++_i) {\n\t\t\t\t\tvar group = groups[_i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\t});\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tvar ObjectLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ObjectLoader, _Loader);\n\n\t\tfunction ObjectLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ObjectLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json, onLoad) {\n\t\t\tvar shapes = this.parseShape(json.shapes);\n\t\t\tvar geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tvar images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tvar textures = this.parseTextures(json.textures, images);\n\t\t\tvar materials = this.parseMaterials(json.materials, textures);\n\t\t\tvar object = this.parseObject(json.object, geometries, materials);\n\n\t\t\tif (json.animations) {\n\t\t\t\tobject.animations = this.parseAnimations(json.animations);\n\t\t\t}\n\n\t\t\tif (json.images === undefined || json.images.length === 0) {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.parseShape = function parseShape(json) {\n\t\t\tvar shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\t_proto.parseGeometries = function parseGeometries(json, shapes) {\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar geometry = void 0;\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry':\n\t\t\t\t\t\t\t// backwards compatible\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tvar shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var _j = 0, _jl = data.shapes.length; _j < _jl; _j++) {\n\t\t\t\t\t\t\t\tvar _shape = shapes[data.shapes[_j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(_shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t};\n\n\t\t_proto.parseMaterials = function parseMaterials(json, textures) {\n\t\t\tvar cache = {}; // MultiMaterial\n\n\t\t\tvar materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tvar material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t};\n\n\t\t_proto.parseAnimations = function parseAnimations(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar data = json[i];\n\t\t\t\tvar clip = AnimationClip.parse(data);\n\t\t\t\tif (data.uuid !== undefined) clip.uuid = data.uuid;\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\t_proto.parseImages = function parseImages(json, onLoad) {\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tvar manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (var i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tvar image = json[i];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (var j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tvar currentUrl = url[j];\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(currentUrl) ? currentUrl : scope.resourcePath + currentUrl;\n\t\t\t\t\t\t\timages[image.uuid].push(loadImage(path));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tvar _path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(image.url) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[image.uuid] = loadImage(_path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t};\n\n\t\t_proto.parseTextures = function parseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = void 0;\n\n\t\t\t\t\tif (Array.isArray(images[data.image])) {\n\t\t\t\t\t\ttexture = new CubeTexture(images[data.image]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture = new Texture(images[data.image]);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t};\n\n\t\t_proto.parseObject = function parseObject(data, geometries, materials) {\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tvar uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.');\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor (var l = 0; l < levels.length; l++) {\n\t\t\t\t\tvar level = levels[l];\n\t\t\t\t\tvar child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\t\t/* DEPRECATED */\n\t\t;\n\n\t\t_proto.setTexturePath = function setTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t};\n\n\t\treturn ObjectLoader;\n\t}(Loader);\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, scope.options);\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tfunction ShapePath() {\n\t\tthis.type = 'ShapePath';\n\t\tthis.color = new Color();\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\n\tObject.assign(ShapePath.prototype, {\n\t\tmoveTo: function moveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tlineTo: function lineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t},\n\t\tquadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tbezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t},\n\t\tsplineThru: function splineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t},\n\t\ttoShapes: function toShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor (var i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tvar _tmpPath = inSubpaths[i];\n\n\t\t\t\t\tvar _tmpShape = new Shape();\n\n\t\t\t\t\t_tmpShape.curves = _tmpPath.curves;\n\t\t\t\t\tshapes.push(_tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tvar polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tvar inside = false;\n\n\t\t\t\tfor (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tvar edgeLowPt = inPolygon[p];\n\t\t\t\t\tvar edgeHighPt = inPolygon[q];\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tvar holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (var i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n\t\t\t\t\tvar sho = newShapeHoles[_sIdx];\n\n\t\t\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (_sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: _sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[_sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor (var _i = 0, il = newShapes.length; _i < il; _i++) {\n\t\t\t\ttmpShape = newShapes[_i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[_i];\n\n\t\t\t\tfor (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\t});\n\n\tfunction Font(data) {\n\t\tthis.type = 'Font';\n\t\tthis.data = data;\n\t}\n\n\tObject.assign(Font.prototype, {\n\t\tisFont: true,\n\t\tgenerateShapes: function generateShapes(text, size) {\n\t\t\tif (size === undefined) size = 100;\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths(text, size, this.data);\n\n\t\t\tfor (var p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\t});\n\n\tfunction createPaths(text, size, data) {\n\t\tvar chars = Array.from ? Array.from(text) : String(text).split(''); // workaround for IE11, see #13988\n\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tvar paths = [];\n\t\tvar offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\tvar char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tvar ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tvar glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tvar path = new ShapePath();\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tvar outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (var i = 0, l = outline.length; i < l;) {\n\t\t\t\tvar action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tfunction FontLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFontLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FontLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t},\n\t\tparse: function parse(json) {\n\t\t\treturn new Font(json);\n\t\t}\n\t});\n\n\tvar _context;\n\n\tvar AudioContext = {\n\t\tgetContext: function getContext() {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function setContext(value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tfunction AudioLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tAudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: AudioLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice(0);\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\t});\n\n\tfunction HemisphereLightProbe(skyColor, groundColor, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(skyColor);\n\t\tvar color2 = new Color().set(groundColor);\n\t\tvar sky = new Vector3(color1.r, color1.g, color1.b);\n\t\tvar ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\tvar c0 = Math.sqrt(Math.PI);\n\t\tvar c1 = c0 * Math.sqrt(0.75);\n\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: HemisphereLightProbe,\n\t\tisHemisphereLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying colors not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction AmbientLightProbe(color, intensity) {\n\t\tLightProbe.call(this, undefined, intensity);\n\t\tvar color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {\n\t\tconstructor: AmbientLightProbe,\n\t\tisAmbientLightProbe: true,\n\t\tcopy: function copy(source) {\n\t\t\t// modifying color not currently supported\n\t\t\tLightProbe.prototype.copy.call(this, source);\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = LightProbe.prototype.toJSON.call(this, meta); // data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar _eyeRight = new Matrix4();\n\n\tvar _eyeLeft = new Matrix4();\n\n\tfunction StereoCamera() {\n\t\tthis.type = 'StereoCamera';\n\t\tthis.aspect = 1;\n\t\tthis.eyeSep = 0.064;\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable(1);\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable(2);\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\t}\n\n\tObject.assign(StereoCamera.prototype, {\n\t\tupdate: function update(camera) {\n\t\t\tvar cache = this._cache;\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tvar xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\t});\n\n\tvar Clock = /*#__PURE__*/function () {\n\t\tfunction Clock(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tvar _proto = Clock.prototype;\n\n\t\t_proto.start = function start() {\n\t\t\tthis.startTime = (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t};\n\n\t\t_proto.getElapsedTime = function getElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t};\n\n\t\t_proto.getDelta = function getDelta() {\n\t\t\tvar diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tvar newTime = (typeof performance === 'undefined' ? Date : performance).now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t};\n\n\t\treturn Clock;\n\t}();\n\n\tvar _position$2 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$1 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation = /*@__PURE__*/new Vector3();\n\n\tvar AudioListener = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(AudioListener, _Object3D);\n\n\t\tfunction AudioListener() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'AudioListener';\n\t\t\t_this.context = AudioContext.getContext();\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(_this.context.destination);\n\n\t\t\t_this.filter = null;\n\t\t\t_this.timeDelta = 0; // private\n\n\t\t\t_this._clock = new Clock();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AudioListener.prototype;\n\n\t\t_proto.getInput = function getInput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.removeFilter = function removeFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.filter;\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMasterVolume = function getMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setMasterVolume = function setMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Object3D.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);\n\n\t\t\t_orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$2.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$2.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$2.x, _position$2.y, _position$2.z);\n\t\t\t\tlistener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t};\n\n\t\treturn AudioListener;\n\t}(Object3D);\n\n\tvar Audio = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Audio, _Object3D);\n\n\t\tfunction Audio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Audio';\n\t\t\t_this.listener = listener;\n\t\t\t_this.context = listener.context;\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(listener.getInput());\n\n\t\t\t_this.autoplay = false;\n\t\t\t_this.buffer = null;\n\t\t\t_this.detune = 0;\n\t\t\t_this.loop = false;\n\t\t\t_this.loopStart = 0;\n\t\t\t_this.loopEnd = 0;\n\t\t\t_this.offset = 0;\n\t\t\t_this.duration = undefined;\n\t\t\t_this.playbackRate = 1;\n\t\t\t_this.isPlaying = false;\n\t\t\t_this.hasPlaybackControl = true;\n\t\t\t_this.source = null;\n\t\t\t_this.sourceType = 'empty';\n\t\t\t_this._startedAt = 0;\n\t\t\t_this._progress = 0;\n\t\t\t_this._connected = false;\n\t\t\t_this.filters = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Audio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.setNodeSource = function setNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaElementSource = function setMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaStreamSource = function setMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setBuffer = function setBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.play = function play(delay) {\n\t\t\tif (delay === undefined) delay = 0;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t};\n\n\t\t_proto.pause = function pause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.connect = function connect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.disconnect = function disconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilters = function getFilters() {\n\t\t\treturn this.filters;\n\t\t};\n\n\t\t_proto.setFilters = function setFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDetune = function setDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDetune = function getDetune() {\n\t\t\treturn this.detune;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t};\n\n\t\t_proto.setPlaybackRate = function setPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getPlaybackRate = function getPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t};\n\n\t\t_proto.onEnded = function onEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t};\n\n\t\t_proto.getLoop = function getLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopStart = function setLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopEnd = function setLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getVolume = function getVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setVolume = function setVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Audio;\n\t}(Object3D);\n\n\tvar _position$3 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$2 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tvar PositionalAudio = /*#__PURE__*/function (_Audio) {\n\t\t_inheritsLoose(PositionalAudio, _Audio);\n\n\t\tfunction PositionalAudio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Audio.call(this, listener) || this;\n\t\t\t_this.panner = _this.context.createPanner();\n\t\t\t_this.panner.panningModel = 'HRTF';\n\n\t\t\t_this.panner.connect(_this.gain);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PositionalAudio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.panner;\n\t\t};\n\n\t\t_proto.getRefDistance = function getRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t};\n\n\t\t_proto.setRefDistance = function setRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getRolloffFactor = function getRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t};\n\n\t\t_proto.setRolloffFactor = function setRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDistanceModel = function getDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t};\n\n\t\t_proto.setDistanceModel = function setDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxDistance = function getMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t};\n\n\t\t_proto.setMaxDistance = function setMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDirectionalCone = function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Audio.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);\n\n\t\t\t_orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position$3.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position$3.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position$3.x, _position$3.y, _position$3.z);\n\t\t\t\tpanner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);\n\t\t\t}\n\t\t};\n\n\t\treturn PositionalAudio;\n\t}(Audio);\n\n\tvar AudioAnalyser = /*#__PURE__*/function () {\n\t\tfunction AudioAnalyser(audio, fftSize) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tvar _proto = AudioAnalyser.prototype;\n\n\t\t_proto.getFrequencyData = function getFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t};\n\n\t\t_proto.getAverageFrequency = function getAverageFrequency() {\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t};\n\n\t\treturn AudioAnalyser;\n\t}();\n\n\tfunction PropertyMixer(binding, typeName, valueSize) {\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\t\tvar mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch (typeName) {\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\t}\n\n\tObject.assign(PropertyMixer.prototype, {\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function accumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t},\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function accumulateAdditive(weight) {\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t},\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function apply(accuIndex) {\n\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (var i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function saveOriginalState() {\n\t\t\tvar binding = this.binding;\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (var i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t},\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function restoreOriginalState() {\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t},\n\t\t_setAdditiveIdentityNumeric: function _setAdditiveIdentityNumeric() {\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (var i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t},\n\t\t_setAdditiveIdentityQuaternion: function _setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t},\n\t\t_setAdditiveIdentityOther: function _setAdditiveIdentityOther() {\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (var i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t},\n\t\t// mix functions\n\t\t_select: function _select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_slerp: function _slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t},\n\t\t_slerpAdditive: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t},\n\t\t_lerp: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t},\n\t\t_lerpAdditive: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tvar _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tvar _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tvar _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tvar _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function getValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function setValue(array, offset) {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function bind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function parseTrackName(trackName) {\n\t\t\tvar matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tvar objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tvar bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tvar searchNodeSubtree = function searchNodeSubtree(children) {\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function _getValue_unavailable() {},\n\t\t_setValue_unavailable: function _setValue_unavailable() {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function bind() {\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tvar objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (var i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tvar nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tvar versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === \"morphTargetInfluences\") {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tfunction AnimationObjectGroup() {\n\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\tindices[arguments[i].uuid] = i;\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\t\tthis.stats = {\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t},\n\n\t\t\t\tget inUse() {\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tget bindingsPerObject() {\n\t\t\t\treturn scope._bindings.length;\n\t\t\t}\n\n\t\t};\n\t}\n\n\tObject.assign(AnimationObjectGroup.prototype, {\n\t\tisAnimationObjectGroup: true,\n\t\tadd: function add() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var _j = 0, _m = nBindings; _j !== _m; ++_j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[_j],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tvar binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[_j], parsedPaths[_j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\tremove: function remove() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// remove & forget\n\t\tuncache: function uncache() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tvar _lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t_lastObject = objects[_lastIndex];\n\n\t\t\t\t\t\tindicesByUUID[_lastObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = _lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var _j2 = 0, _m2 = nBindings; _j2 !== _m2; ++_j2) {\n\t\t\t\t\t\t\tvar _bindingsForPath = bindings[_j2];\n\t\t\t\t\t\t\t_bindingsForPath[index] = _bindingsForPath[_lastIndex];\n\n\t\t\t\t\t\t\t_bindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t},\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\t\tsubscribe_: function subscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[path];\n\t\t\tvar bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tvar object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t},\n\t\tunsubscribe_: function unsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\t});\n\n\tvar AnimationAction = /*#__PURE__*/function () {\n\t\tfunction AnimationAction(mixer, clip, localRoot, blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot || null;\n\t\t\tthis.blendMode = blendMode || clip.blendMode;\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tvar _proto = AnimationAction.prototype;\n\n\t\t_proto.play = function play() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t};\n\n\t\t_proto.reset = function reset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t};\n\n\t\t_proto.isRunning = function isRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\t\t;\n\n\t\t_proto.isScheduled = function isScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t};\n\n\t\t_proto.startAt = function startAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveWeight = function setEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\t\t;\n\n\t\t_proto.getEffectiveWeight = function getEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t};\n\n\t\t_proto.fadeIn = function fadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t};\n\n\t\t_proto.fadeOut = function fadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t};\n\n\t\t_proto.crossFadeFrom = function crossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.crossFadeTo = function crossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t};\n\n\t\t_proto.stopFading = function stopFading() {\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveTimeScale = function setEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\t\t;\n\n\t\t_proto.getEffectiveTimeScale = function getEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t};\n\n\t\t_proto.setDuration = function setDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.syncWith = function syncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.halt = function halt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t};\n\n\t\t_proto.warp = function warp(startTimeScale, endTimeScale, duration) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stopWarping = function stopWarping() {\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\t\t;\n\n\t\t_proto.getMixer = function getMixer() {\n\t\t\treturn this._mixer;\n\t\t};\n\n\t\t_proto.getClip = function getClip() {\n\t\t\treturn this._clip;\n\t\t};\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\t\t;\n\n\t\t_proto._update = function _update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tvar timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tvar clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tvar weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tvar _interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (var j = 0, m = _interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\t_interpolants[j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (var _j = 0, _m = _interpolants.length; _j !== _m; ++_j) {\n\t\t\t\t\t\t\t_interpolants[_j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[_j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._updateWeight = function _updateWeight(time) {\n\t\t\tvar weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t};\n\n\t\t_proto._updateTimeScale = function _updateTimeScale(time) {\n\t\t\tvar timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t};\n\n\t\t_proto._updateTime = function _updateTime(deltaTime) {\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\t\t\tvar pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tvar loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t};\n\n\t\t_proto._setEndings = function _setEndings(atStart, atEnd, pingPong) {\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._scheduleFading = function _scheduleFading(duration, weightNow, weightThen) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn AnimationAction;\n\t}();\n\n\tfunction AnimationMixer(root) {\n\t\tthis._root = root;\n\n\t\tthis._initMemoryManager();\n\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\t}\n\n\tAnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: AnimationMixer,\n\t\t_bindAction: function _bindAction(action, prototypeAction) {\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tvar bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar track = tracks[i],\n\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tvar binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t},\n\t\t_activateAction: function _activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tvar rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t},\n\t\t_deactivateAction: function _deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tvar bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t},\n\t\t// Memory manager\n\t\t_initMemoryManager: function _initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t// Memory management for AnimationAction objects\n\t\t_isActiveAction: function _isActiveAction(action) {\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t},\n\t\t_addInactiveAction: function _addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tvar actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t},\n\t\t_removeInactiveAction: function _removeInactiveAction(action) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t},\n\t\t_removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(action) {\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t_lendAction: function _lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t},\n\t\t_takeBackAction: function _takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t},\n\t\t// Memory management for PropertyMixer objects\n\t\t_addInactiveBinding: function _addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindings = this._bindings;\n\t\t\tvar bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t},\n\t\t_removeInactiveBinding: function _removeInactiveBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t},\n\t\t_lendBinding: function _lendBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t},\n\t\t_takeBackBinding: function _takeBackBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t},\n\t\t// Memory management of Interpolants for weight and time scale\n\t\t_lendControlInterpolant: function _lendControlInterpolant() {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tvar interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t},\n\t\t_takeBackControlInterpolant: function _takeBackControlInterpolant(interpolant) {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t},\n\t\t_controlInterpolantsResultBuffer: new Float32Array(1),\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function clipAction(clip, optionalRoot, blendMode) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid;\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tvar actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tvar newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t},\n\t\t// get an existing action\n\t\texistingAction: function existingAction(clip, optionalRoot) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function stopAllAction() {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (var i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// advance the time and update apply the animation\n\t\tupdate: function update(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (var i = 0; i !== nActions; ++i) {\n\t\t\t\tvar action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (var _i = 0; _i !== nBindings; ++_i) {\n\t\t\t\tbindings[_i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function setTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (var i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t},\n\t\t// return this mixer's root target object\n\t\tgetRoot: function getRoot() {\n\t\t\treturn this._root;\n\t\t},\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function uncacheClip(clip) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tvar action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t},\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function uncacheRoot(root) {\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (var clipUuid in actionsByClip) {\n\t\t\t\tvar actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (var trackName in bindingByName) {\n\t\t\t\t\tvar binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function uncacheAction(clip, optionalRoot) {\n\t\t\tvar action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar Uniform = /*#__PURE__*/function () {\n\t\tfunction Uniform(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tvar _proto = Uniform.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t};\n\n\t\treturn Uniform;\n\t}();\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function copy(source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function setBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function setType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function setItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function setCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near, far) {\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function get() {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction _intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t_intersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function set(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function setFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type.');\n\t\t\t}\n\t\t},\n\t\tintersectObject: function intersectObject(object, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\t_intersectObject(object, this, intersects, recursive);\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function intersectObjects(objects, recursive, optionalTarget) {\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif (Array.isArray(objects) === false) {\n\t\t\t\tconsole.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n\t\t\t\treturn intersects;\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = objects.length; i < l; i++) {\n\t\t\t\t_intersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = /*#__PURE__*/function () {\n\t\tfunction Spherical(radius, phi, theta) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (phi === void 0) {\n\t\t\t\tphi = 0;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Spherical.prototype;\n\n\t\t_proto.set = function set(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\t\t;\n\n\t\t_proto.makeSafe = function makeSafe() {\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Spherical;\n\t}();\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tvar Cylindrical = /*#__PURE__*/function () {\n\t\tfunction Cylindrical(radius, theta, y) {\n\t\t\tthis.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y !== undefined ? y : 0; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Cylindrical.prototype;\n\n\t\t_proto.set = function set(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Cylindrical;\n\t}();\n\n\tvar _vector$7 = /*@__PURE__*/new Vector2();\n\n\tvar Box2 = /*#__PURE__*/function () {\n\t\tfunction Box2(min, max) {\n\t\t\tObject.defineProperty(this, 'isBox2', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tthis.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);\n\t\t\tthis.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);\n\t\t}\n\n\t\tvar _proto = Box2.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$7.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$7.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box2;\n\t}();\n\n\tvar _startP = /*@__PURE__*/new Vector3();\n\n\tvar _startEnd = /*@__PURE__*/new Vector3();\n\n\tvar Line3 = /*#__PURE__*/function () {\n\t\tfunction Line3(start, end) {\n\t\t\tthis.start = start !== undefined ? start : new Vector3();\n\t\t\tthis.end = end !== undefined ? end : new Vector3();\n\t\t}\n\n\t\tvar _proto = Line3.prototype;\n\n\t\t_proto.set = function set(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.delta = function delta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t};\n\n\t\t_proto.distanceSq = function distanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t};\n\n\t\t_proto.distance = function distance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.closestPointToPointParameter = function closestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tvar startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tvar startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, clampToLine, target) {\n\t\t\tvar t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t};\n\n\t\treturn Line3;\n\t}();\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$8 = /*@__PURE__*/new Vector3();\n\n\tvar SpotLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(SpotLightHelper, _Object3D);\n\n\t\tfunction SpotLightHelper(light, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tvar p1 = i / l * Math.PI * 2;\n\t\t\t\tvar p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.cone = new LineSegments(geometry, material);\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$8.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$8);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t};\n\n\t\treturn SpotLightHelper;\n\t}(Object3D);\n\n\tvar _vector$9 = /*@__PURE__*/new Vector3();\n\n\tvar _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tvar SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(SkeletonHelper, _LineSegments);\n\n\t\tfunction SkeletonHelper(object) {\n\t\t\tvar _this;\n\n\t\t\tvar bones = getBoneList(object);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar color1 = new Color(0, 0, 1);\n\t\t\tvar color2 = new Color(0, 1, 0);\n\n\t\t\tfor (var i = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'SkeletonHelper';\n\t\t\t_this.isSkeletonHelper = true;\n\t\t\t_this.root = object;\n\t\t\t_this.bones = bones;\n\t\t\t_this.matrix = object.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SkeletonHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar bones = this.bones;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.getInverse(this.root.matrixWorld);\n\n\t\t\tfor (var i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$9.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$9.x, _vector$9.y, _vector$9.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$9.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn SkeletonHelper;\n\t}(LineSegments);\n\n\tfunction getBoneList(object) {\n\t\tvar boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (var i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tvar PointLightHelper = /*#__PURE__*/function (_Mesh) {\n\t\t_inheritsLoose(PointLightHelper, _Mesh);\n\n\t\tfunction PointLightHelper(light, sphereSize, color) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new SphereBufferGeometry(sphereSize, 4, 2);\n\t\t\tvar material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _Mesh.call(this, geometry, material) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.color = color;\n\t\t\t_this.type = 'PointLightHelper';\n\t\t\t_this.matrix = _this.light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\t\treturn PointLightHelper;\n\t}(Mesh);\n\n\tvar _vector$a = /*@__PURE__*/new Vector3();\n\n\tvar _color1 = /*@__PURE__*/new Color();\n\n\tvar _color2 = /*@__PURE__*/new Color();\n\n\tvar HemisphereLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(HemisphereLightHelper, _Object3D);\n\n\t\tfunction HemisphereLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new OctahedronBufferGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\t_this.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (_this.color === undefined) _this.material.vertexColors = true;\n\t\t\tvar position = geometry.getAttribute('position');\n\t\t\tvar colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n\t\t\t_this.add(new Mesh(geometry, _this.material));\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tvar colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (var i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tvar color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$a.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t};\n\n\t\treturn HemisphereLightHelper;\n\t}(Object3D);\n\n\tvar GridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(GridHelper, _LineSegments);\n\n\t\tfunction GridHelper(size, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tsize = size || 10;\n\t\t\tdivisions = divisions || 10;\n\t\t\tcolor1 = new Color(color1 !== undefined ? color1 : 0x444444);\n\t\t\tcolor2 = new Color(color2 !== undefined ? color2 : 0x888888);\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\t\t\tvar vertices = [],\n\t\t\t\t\tcolors = [];\n\n\t\t\tfor (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'GridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn GridHelper;\n\t}(LineSegments);\n\n\tvar PolarGridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(PolarGridHelper, _LineSegments);\n\n\t\tfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tradius = radius || 10;\n\t\t\tradials = radials || 16;\n\t\t\tcircles = circles || 8;\n\t\t\tdivisions = divisions || 64;\n\t\t\tcolor1 = new Color(color1 !== undefined ? color1 : 0x444444);\n\t\t\tcolor2 = new Color(color2 !== undefined ? color2 : 0x888888);\n\t\t\tvar vertices = [];\n\t\t\tvar colors = []; // create the radials\n\n\t\t\tfor (var i = 0; i <= radials; i++) {\n\t\t\t\tvar v = i / radials * (Math.PI * 2);\n\t\t\t\tvar x = Math.sin(v) * radius;\n\t\t\t\tvar z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tvar color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (var _i = 0; _i <= circles; _i++) {\n\t\t\t\tvar _color = _i & 1 ? color1 : color2;\n\n\t\t\t\tvar r = radius - radius / circles * _i;\n\n\t\t\t\tfor (var j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tvar _v = j / divisions * (Math.PI * 2);\n\n\t\t\t\t\tvar _x = Math.sin(_v) * r;\n\n\t\t\t\t\tvar _z = Math.cos(_v) * r;\n\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b); // second vertex\n\n\t\t\t\t\t_v = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\t_x = Math.sin(_v) * r;\n\t\t\t\t\t_z = Math.cos(_v) * r;\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'PolarGridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolarGridHelper;\n\t}(LineSegments);\n\n\tvar _v1$6 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v3$1 = /*@__PURE__*/new Vector3();\n\n\tvar DirectionalLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(DirectionalLightHelper, _Object3D);\n\n\t\tfunction DirectionalLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.lightPlane = new Line(geometry, material);\n\n\t\t\t_this.add(_this.lightPlane);\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\t_this.targetLine = new Line(geometry, material);\n\n\t\t\t_this.add(_this.targetLine);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\t_v1$6.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3$1.subVectors(_v2$3, _v1$6);\n\n\t\t\tthis.lightPlane.lookAt(_v2$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2$3);\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\t\t};\n\n\t\treturn DirectionalLightHelper;\n\t}(Object3D);\n\n\tvar _vector$b = /*@__PURE__*/new Vector3();\n\n\tvar _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tvar CameraHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(CameraHelper, _LineSegments);\n\n\t\tfunction CameraHelper(camera) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar pointMap = {}; // colors\n\n\t\t\tvar colorFrustum = new Color(0xffaa00);\n\t\t\tvar colorCone = new Color(0xff0000);\n\t\t\tvar colorUp = new Color(0x00aaff);\n\t\t\tvar colorTarget = new Color(0xffffff);\n\t\t\tvar colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'CameraHelper';\n\t\t\t_this.camera = camera;\n\t\t\tif (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();\n\t\t\t_this.matrix = camera.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.pointMap = pointMap;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CameraHelper.prototype;\n\n\t\t_proto.update = function update() {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\t\t\tvar w = 1,\n\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t};\n\n\t\treturn CameraHelper;\n\t}(LineSegments);\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector$b.set(x, y, z).unproject(camera);\n\n\t\tvar points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector$b.x, _vector$b.y, _vector$b.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar _box$3 = /*@__PURE__*/new Box3();\n\n\tvar BoxHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(BoxHelper, _LineSegments);\n\n\t\tfunction BoxHelper(object, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.object = object;\n\t\t\t_this.type = 'BoxHelper';\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = BoxHelper.prototype;\n\n\t\t_proto.update = function update(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box$3.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box$3.isEmpty()) return;\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn BoxHelper;\n\t}(LineSegments);\n\n\tvar Box3Helper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(Box3Helper, _LineSegments);\n\n\t\tfunction Box3Helper(box, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.box = box;\n\t\t\t_this.type = 'Box3Helper';\n\n\t\t\t_this.geometry.computeBoundingSphere();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Box3Helper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn Box3Helper;\n\t}(LineSegments);\n\n\tvar PlaneHelper = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(PlaneHelper, _Line);\n\n\t\tfunction PlaneHelper(plane, size, hex) {\n\t\t\tvar _this;\n\n\t\t\tvar color = hex !== undefined ? hex : 0xffff00;\n\t\t\tvar positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\t_this = _Line.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.type = 'PlaneHelper';\n\t\t\t_this.plane = plane;\n\t\t\t_this.size = size === undefined ? 1 : size;\n\t\t\tvar positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\t_this.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PlaneHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\n\t\t\t_Line.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn PlaneHelper;\n\t}(Line);\n\n\tvar _axis = /*@__PURE__*/new Vector3();\n\n\tvar _lineGeometry, _coneGeometry;\n\n\tvar ArrowHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(ArrowHelper, _Object3D);\n\n\t\tfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this; // dir is assumed to be normalized\n\n\t\t\t_this.type = 'ArrowHelper';\n\t\t\tif (dir === undefined) dir = new Vector3(0, 0, 1);\n\t\t\tif (origin === undefined) origin = new Vector3(0, 0, 0);\n\t\t\tif (length === undefined) length = 1;\n\t\t\tif (color === undefined) color = 0xffff00;\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\t_this.position.copy(origin);\n\n\t\t\t_this.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.line.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.line);\n\n\t\t\t_this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.cone.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.setDirection(dir);\n\n\t\t\t_this.setLength(length, headLength, headWidth);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ArrowHelper.prototype;\n\n\t\t_proto.setDirection = function setDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tvar radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t};\n\n\t\t_proto.setLength = function setLength(length, headLength, headWidth) {\n\t\t\tif (headLength === undefined) headLength = 0.2 * length;\n\t\t\tif (headWidth === undefined) headWidth = 0.2 * headLength;\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t};\n\n\t\t_proto.setColor = function setColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ArrowHelper;\n\t}(Object3D);\n\n\tvar AxesHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(AxesHelper, _LineSegments);\n\n\t\tfunction AxesHelper(size) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tvar vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tvar colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'AxesHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AxesHelper;\n\t}(LineSegments);\n\n\tvar _ENCODINGS;\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tvar EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = (_ENCODINGS = {}, _ENCODINGS[LinearEncoding] = 0, _ENCODINGS[sRGBEncoding] = 1, _ENCODINGS[RGBEEncoding] = 2, _ENCODINGS[RGBM7Encoding] = 3, _ENCODINGS[RGBM16Encoding] = 4, _ENCODINGS[RGBDEncoding] = 5, _ENCODINGS[GammaEncoding] = 6, _ENCODINGS);\n\n\tvar _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tvar _createPlanes2 = /*@__PURE__*/_createPlanes(),\n\t\t\t_lodPlanes = _createPlanes2._lodPlanes,\n\t\t\t_sizeLods = _createPlanes2._sizeLods,\n\t\t\t_sigmas = _createPlanes2._sigmas;\n\n\tvar _oldTarget = null; // Golden Ratio\n\n\tvar PHI = (1 + Math.sqrt(5)) / 2;\n\tvar INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tvar _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar PMREMGenerator = /*#__PURE__*/function () {\n\t\tfunction PMREMGenerator(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tvar _proto = PMREMGenerator.prototype;\n\n\t\t_proto.fromScene = function fromScene(scene, sigma, near, far) {\n\t\t\tif (sigma === void 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 100;\n\t\t\t}\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromEquirectangular = function fromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromCubemap = function fromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileCubemapShader = function compileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileEquirectangularShader = function compileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\t;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (var i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\t\t;\n\n\t\t_proto._cleanup = function _cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t};\n\n\t\t_proto._fromTexture = function _fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._allocateTargets = function _allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._compileMaterial = function _compileMaterial(material) {\n\t\t\tvar tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t};\n\n\t\t_proto._sceneToCubeUV = function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tvar upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tvar forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\tvar clearColor = renderer.getClearColor();\n\t\t\tvar clearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\tvar background = scene.background;\n\n\t\t\tif (background && background.isColor) {\n\t\t\t\tbackground.convertSRGBToLinear(); // Convert linear to RGBE\n\n\t\t\t\tvar maxComponent = Math.max(background.r, background.g, background.b);\n\t\t\t\tvar fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\t\t\tbackground = background.multiplyScalar(Math.pow(2.0, -fExp));\n\t\t\t\tvar alpha = (fExp + 128.0) / 255.0;\n\t\t\t\trenderer.setClearColor(background, alpha);\n\t\t\t\tscene.background = null;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.setClearColor(clearColor, clearAlpha);\n\t\t};\n\n\t\t_proto._textureToCubeUV = function _textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t};\n\n\t\t_proto._applyPMREM = function _applyPMREM(cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (var i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tvar sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tvar poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t;\n\n\t\t_proto._blur = function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t};\n\n\t\t_proto._halfBlur = function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\t\t\tvar blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\t\t\tvar pixels = _sizeLods[lodIn] - 1;\n\t\t\tvar radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES);\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor (var i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tvar _x = i / sigmaPixels;\n\n\t\t\t\tvar weight = Math.exp(-_x * _x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i = 0; _i < weights.length; _i++) {\n\t\t\t\tweights[_i] = weights[_i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tvar outputSize = _sizeLods[lodOut];\n\t\t\tvar x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tvar y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t};\n\n\t\treturn PMREMGenerator;\n\t}();\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\t\tvar lod = LOD_MAX;\n\n\t\tfor (var i = 0; i < TOTAL_LODS; i++) {\n\t\t\tvar sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tvar texelSize = 1.0 / (sizeLod - 1);\n\t\t\tvar min = -texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\t\t\tvar position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tvar uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tvar faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (var face = 0; face < cubeFaces; face++) {\n\t\t\t\tvar x = face % 3 * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : -1;\n\t\t\t\tvar coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tvar fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes: _lodPlanes,\n\t\t\t_sizeLods: _sizeLods,\n\t\t\t_sigmas: _sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tvar weights = new Float32Array(maxSamples);\n\t\tvar poleAxis = new Vector3(0, 1, 0);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tvar texelSize = new Vector2(1, 1);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction Face4(a, b, c, d, normal, color, materialIndex) {\n\t\tconsole.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n\t\treturn new Face3(a, b, c, normal, color, materialIndex);\n\t}\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials) {\n\t\tif (materials === undefined) materials = [];\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tObject.assign(CurvePath.prototype, {\n\t\tcreatePointsGeometry: function createPointsGeometry(divisions) {\n\t\t\tconsole.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.'); // generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints(divisions);\n\t\t\treturn this.createGeometry(pts);\n\t\t},\n\t\tcreateSpacedPointsGeometry: function createSpacedPointsGeometry(divisions) {\n\t\t\tconsole.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.'); // generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints(divisions);\n\t\t\treturn this.createGeometry(pts);\n\t\t},\n\t\tcreateGeometry: function createGeometry(points) {\n\t\t\tconsole.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tgeometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n\t\t\t}\n\n\t\t\treturn geometry;\n\t\t}\n\t}); //\n\n\tObject.assign(Path.prototype, {\n\t\tfromPoints: function fromPoints(points) {\n\t\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\t\treturn this.setFromPoints(points);\n\t\t}\n\t}); //\n\n\tfunction ClosedSplineCurve3(points) {\n\t\tconsole.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\t}\n\tClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction SplineCurve3(points) {\n\t\tconsole.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //\n\n\tfunction Spline(points) {\n\t\tconsole.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');\n\t\tCatmullRomCurve3.call(this, points);\n\t\tthis.type = 'catmullrom';\n\t}\n\tSpline.prototype = Object.create(CatmullRomCurve3.prototype);\n\tObject.assign(Spline.prototype, {\n\t\tinitFromArray: function initFromArray()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .initFromArray() has been removed.');\n\t\t},\n\t\tgetControlPointsArray: function getControlPointsArray()\n\t\t/* optionalTarget */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .getControlPointsArray() has been removed.');\n\t\t},\n\t\treparametrizeByArcLength: function reparametrizeByArcLength()\n\t\t/* samplingCoef */\n\t\t{\n\t\t\tconsole.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');\n\t\t}\n\t}); //\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tObject.assign(Loader.prototype, {\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\t\treturn LoaderUtils.extractUrlBase(url);\n\t\t}\n\t});\n\tLoader.Handlers = {\n\t\tadd: function add()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function get()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tObject.assign(Box2.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Box3.prototype, {\n\t\tcenter: function center(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\t\treturn this.getCenter(optionalTarget);\n\t\t},\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t},\n\t\tsize: function size(optionalTarget) {\n\t\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\t\treturn this.getSize(optionalTarget);\n\t\t}\n\t});\n\tObject.assign(Sphere.prototype, {\n\t\tempty: function empty() {\n\t\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\t\treturn this.isEmpty();\n\t\t}\n\t});\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t};\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tObject.assign(MathUtils, {\n\t\trandom16: function random16() {\n\t\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\t\treturn Math.random();\n\t\t},\n\t\tnearestPowerOfTwo: function nearestPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\t\treturn MathUtils.floorPowerOfTwo(value);\n\t\t},\n\t\tnextPowerOfTwo: function nextPowerOfTwo(value) {\n\t\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t\t}\n\t});\n\tObject.assign(Matrix3.prototype, {\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\");\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\t\treturn vector.applyMatrix3(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix3(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t\t}\n\t});\n\tObject.assign(Matrix4.prototype, {\n\t\textractPosition: function extractPosition(m) {\n\t\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\t\treturn this.copyPosition(m);\n\t\t},\n\t\tflattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\t\t\tconsole.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\");\n\t\t\treturn this.toArray(array, offset);\n\t\t},\n\t\tgetPosition: function getPosition() {\n\t\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\t\treturn this.makeRotationFromQuaternion(q);\n\t\t},\n\t\tmultiplyToArray: function multiplyToArray() {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t\t},\n\t\tmultiplyVector3: function multiplyVector3(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector4: function multiplyVector4(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\tmultiplyVector3Array: function multiplyVector3Array()\n\t\t/* a */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t\t},\n\t\trotateAxis: function rotateAxis(v) {\n\t\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\t\tv.transformDirection(this);\n\t\t},\n\t\tcrossVector: function crossVector(vector) {\n\t\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\t\treturn vector.applyMatrix4(this);\n\t\t},\n\t\ttranslate: function translate() {\n\t\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t\t},\n\t\trotateX: function rotateX() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t\t},\n\t\trotateY: function rotateY() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t\t},\n\t\trotateZ: function rotateZ() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t\t},\n\t\trotateByAxis: function rotateByAxis() {\n\t\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t\t},\n\t\tapplyToBufferAttribute: function applyToBufferAttribute(attribute) {\n\t\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\t\treturn attribute.applyMatrix4(this);\n\t\t},\n\t\tapplyToVector3Array: function applyToVector3Array()\n\t\t/* array, offset, length */\n\t\t{\n\t\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t\t},\n\t\tmakeFrustum: function makeFrustum(left, right, bottom, top, near, far) {\n\t\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t\t}\n\t});\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tObject.assign(Ray.prototype, {\n\t\tisIntersectionBox: function isIntersectionBox(box) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\t\treturn this.intersectsBox(box);\n\t\t},\n\t\tisIntersectionPlane: function isIntersectionPlane(plane) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\t\treturn this.intersectsPlane(plane);\n\t\t},\n\t\tisIntersectionSphere: function isIntersectionSphere(sphere) {\n\t\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\t\treturn this.intersectsSphere(sphere);\n\t\t}\n\t});\n\tObject.assign(Triangle.prototype, {\n\t\tarea: function area() {\n\t\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\t\treturn this.getArea();\n\t\t},\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn this.getBarycoord(point, target);\n\t\t},\n\t\tmidpoint: function midpoint(target) {\n\t\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\t\treturn this.getMidpoint(target);\n\t\t},\n\t\tnormal: function normal(target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn this.getNormal(target);\n\t\t},\n\t\tplane: function plane(target) {\n\t\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\t\treturn this.getPlane(target);\n\t\t}\n\t});\n\tObject.assign(Triangle, {\n\t\tbarycoordFromPoint: function barycoordFromPoint(point, a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t\t},\n\t\tnormal: function normal(a, b, c, target) {\n\t\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\t\treturn Triangle.getNormal(a, b, c, target);\n\t\t}\n\t});\n\tObject.assign(Shape.prototype, {\n\t\textractAllPoints: function extractAllPoints(divisions) {\n\t\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\t\treturn this.extractPoints(divisions);\n\t\t},\n\t\textrude: function extrude(options) {\n\t\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\t\treturn new ExtrudeGeometry(this, options);\n\t\t},\n\t\tmakeGeometry: function makeGeometry(options) {\n\t\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\t\treturn new ShapeGeometry(this, options);\n\t\t}\n\t});\n\tObject.assign(Vector2.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function setEulerFromRotationMatrix() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t\t},\n\t\tsetEulerFromQuaternion: function setEulerFromQuaternion() {\n\t\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t\t},\n\t\tgetPositionFromMatrix: function getPositionFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\t\treturn this.setFromMatrixPosition(m);\n\t\t},\n\t\tgetScaleFromMatrix: function getScaleFromMatrix(m) {\n\t\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\t\treturn this.setFromMatrixScale(m);\n\t\t},\n\t\tgetColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n\t\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\t\treturn this.setFromMatrixColumn(matrix, index);\n\t\t},\n\t\tapplyProjection: function applyProjection(m) {\n\t\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\t\treturn this.applyMatrix4(m);\n\t\t},\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tdistanceToManhattan: function distanceToManhattan(v) {\n\t\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\t\treturn this.manhattanDistanceTo(v);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t});\n\tObject.assign(Vector4.prototype, {\n\t\tfromAttribute: function fromAttribute(attribute, index, offset) {\n\t\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t\t},\n\t\tlengthManhattan: function lengthManhattan() {\n\t\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\t\treturn this.manhattanLength();\n\t\t}\n\t}); //\n\n\tObject.assign(Geometry.prototype, {\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tconsole.error('THREE.Geometry: .computeTangents() has been removed.');\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tconsole.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.assign(Object3D.prototype, {\n\t\tgetChildByName: function getChildByName(name) {\n\t\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\t\treturn this.getObjectByName(name);\n\t\t},\n\t\trenderDepth: function renderDepth() {\n\t\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t\t},\n\t\ttranslate: function translate(distance, axis) {\n\t\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\t\treturn this.translateOnAxis(axis, distance);\n\t\t},\n\t\tgetWorldRotation: function getWorldRotation() {\n\t\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(Mesh.prototype, {\n\t\tsetDrawMode: function setDrawMode() {\n\t\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t}\n\t});\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.LOD: .objects has been renamed to .levels.');\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t},\n\t\tset: function set() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn(\"THREE.PerspectiveCamera.setLens is deprecated. \" + \"Use .setFocalLength and .filmGauge for a photographic setup.\");\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tcopyIndicesArray: function copyIndicesArray()\n\t\t/* indices */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t});\n\tObject.assign(BufferGeometry.prototype, {\n\t\taddIndex: function addIndex(index) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\t\tthis.setIndex(index);\n\t\t},\n\t\taddAttribute: function addAttribute(name, attribute) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t\t}\n\n\t\t\tif (name === 'index') {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\t\tthis.setIndex(attribute);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.setAttribute(name, attribute);\n\t\t},\n\t\taddDrawCall: function addDrawCall(start, count, indexOffset) {\n\t\t\tif (indexOffset !== undefined) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t\t}\n\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\t\tthis.addGroup(start, count);\n\t\t},\n\t\tclearDrawCalls: function clearDrawCalls() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .computeTangents() has been removed.');\n\t\t},\n\t\tcomputeOffsets: function computeOffsets() {\n\t\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t\t},\n\t\tremoveAttribute: function removeAttribute(name) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\t\treturn this.deleteAttribute(name);\n\t\t},\n\t\tapplyMatrix: function applyMatrix(matrix) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\t\treturn this.applyMatrix4(matrix);\n\t\t}\n\t});\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tsetDynamic: function setDynamic(value) {\n\t\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\t\treturn this;\n\t\t},\n\t\tsetArray: function setArray()\n\t\t/* array */\n\t\t{\n\t\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t\t}\n\t}); //\n\n\tObject.assign(ExtrudeBufferGeometry.prototype, {\n\t\tgetArrays: function getArrays() {\n\t\t\tconsole.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');\n\t\t},\n\t\taddShapeList: function addShapeList() {\n\t\t\tconsole.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');\n\t\t},\n\t\taddShape: function addShape() {\n\t\t\tconsole.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.assign(Scene.prototype, {\n\t\tdispose: function dispose() {\n\t\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function value() {\n\t\t\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.assign(WebGLRenderer.prototype, {\n\t\tclearTarget: function clearTarget(renderTarget, color, depth, stencil) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\tthis.clear(color, depth, stencil);\n\t\t},\n\t\tanimate: function animate(callback) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\t\tthis.setAnimationLoop(callback);\n\t\t},\n\t\tgetCurrentRenderTarget: function getCurrentRenderTarget() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\t\treturn this.getRenderTarget();\n\t\t},\n\t\tgetMaxAnisotropy: function getMaxAnisotropy() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\t\t},\n\t\tgetPrecision: function getPrecision() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\t\treturn this.capabilities.precision;\n\t\t},\n\t\tresetGLState: function resetGLState() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\t\treturn this.state.reset();\n\t\t},\n\t\tsupportsFloatTextures: function supportsFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_float');\n\t\t},\n\t\tsupportsHalfFloatTextures: function supportsHalfFloatTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\t\treturn this.extensions.get('OES_texture_half_float');\n\t\t},\n\t\tsupportsStandardDerivatives: function supportsStandardDerivatives() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\t\treturn this.extensions.get('OES_standard_derivatives');\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t\t},\n\t\tsupportsBlendMinMax: function supportsBlendMinMax() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\t\treturn this.extensions.get('EXT_blend_minmax');\n\t\t},\n\t\tsupportsVertexTextures: function supportsVertexTextures() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function supportsInstancedArrays() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t\t},\n\t\tenableScissorTest: function enableScissorTest(boolean) {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\t\tthis.setScissorTest(boolean);\n\t\t},\n\t\tinitMaterial: function initMaterial() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t\t},\n\t\taddPrePlugin: function addPrePlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t\t},\n\t\taddPostPlugin: function addPostPlugin() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t\t},\n\t\tupdateShadowMap: function updateShadowMap() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t\t},\n\t\tsetFaceCulling: function setFaceCulling() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t\t},\n\t\tallocTextureUnit: function allocTextureUnit() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t\t},\n\t\tsetTexture: function setTexture() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t\t},\n\t\tsetTexture2D: function setTexture2D() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t\t},\n\t\tsetTextureCube: function setTextureCube() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t\t},\n\t\tgetActiveMipMapLevel: function getActiveMipMapLevel() {\n\t\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\t\treturn this.getActiveMipmapLevel();\n\t\t}\n\t});\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Audio.prototype, {\n\t\tload: {\n\t\t\tvalue: function value(file) {\n\t\t\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load(file, function (buffer) {\n\t\t\t\t\tscope.setBuffer(buffer);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Audio: .startTime is now .play( delay ).');\n\t\t\t}\n\t\t}\n\t});\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t}; //\n\n\n\tvar GeometryUtils = {\n\t\tmerge: function merge(geometry1, geometry2, materialIndexOffset) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n\t\t\tvar matrix;\n\n\t\t\tif (geometry2.isMesh) {\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\t\t\t}\n\n\t\t\tgeometry1.merge(geometry2, matrix, materialIndexOffset);\n\t\t},\n\t\tcenter: function center(geometry) {\n\t\t\tconsole.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n\t\t\treturn geometry.center();\n\t\t}\n\t};\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tvar SceneUtils = {\n\t\tcreateMultiMaterialObject: function createMultiMaterialObject()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function detach()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function attach()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","console.warn( \"THREE.OrbitControls: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min < max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove, false );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","const ColorLuminance = (hex, lum) => {\n    // validate hex string\n    hex = String(hex).replace(/[^0-9a-f]/gi, '');\n    if (hex.length < 6) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    lum = lum || 0;\n  \n    // convert to decimal and change luminosity\n    var rgb = \"#\", c, i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i * 2, 2), 16);\n      c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n      rgb += (\"00\" + c).substr(c.length);\n    }\n  \n    return rgb;\n  }\n\n  export default ColorLuminance;","import createRock from \"./create_rock\";\n\nconst createAsteroids = (scene, asteroidTexture) => {\n    var maxWidth = 1000;\n    var maxHeight = 200;\n    var maxDepth = 200;\n    var asteroids = [];\n    for (var i = 0; i < 7; i++) {\n      asteroids.push(createRock(5 + Math.random() * 50, 200, maxWidth, 300, 400, scene, asteroidTexture));\n    }\n    for (var i = 0; i < 30; i++) {\n      asteroids.push(createRock(5 + Math.random() * 10, 500, maxWidth, 200, 600, scene, asteroidTexture));\n    }\n    for (var i = 0; i < 160; i++) {\n      asteroids.push(createRock(2 + Math.random() * 5, 1000, maxWidth, 150, 800, scene, asteroidTexture));\n    }\n    return asteroids;\n  }\n\n  export default createAsteroids;","import ColorLuminance from \"./color_luminance\"\n\nconst createRock = (size, spreadX, maxWidth, maxHeight, maxDepth, scene, asteroidTexture) => {\n    const geometry = new THREE.DodecahedronGeometry(size, 1);\n    geometry.vertices.forEach(function (v) {\n      v.x += (0 - Math.random() * (size / 4));\n      v.y += (0 - Math.random() * (size / 4));\n      v.z += (0 - Math.random() * (size / 4));\n    })\n    let color = '#111111';\n    color = ColorLuminance(color, 2 + Math.random() * 10);\n    // console.log(color);\n    const texture = new THREE.MeshStandardMaterial({\n      map: asteroidTexture,\n      // flatShading: THREE.FlatShading,\n      // shininess: 0.5,\n      roughness: 0.8,\n      metalness: 1\n    });\n  \n    const cube = new THREE.Mesh(geometry, texture);\n    cube.castShadow = true;\n    cube.receiveShadow = true;\n    cube.scale.set(1 + Math.random() * 0.4, 1 + Math.random() * 0.8, 1 + Math.random() * 0.4);\n    cube.rotation.y = Math.PI/4;\n    cube.rotation.x = Math.PI/4;\n    var x = spreadX / 2 - Math.random() * spreadX;\n    var centeredness = 1 - (Math.abs(x) / (maxWidth / 2));\n    var y = (maxHeight / 2 - Math.random() * maxHeight) * centeredness\n    var z = (maxDepth / 2 - Math.random() * maxDepth) * centeredness\n    cube.position.set(x, y, z)\n    cube.r = {};\n    cube.r.x = Math.random() * 0.005;\n    cube.r.y = Math.random() * 0.005;\n    cube.r.z = Math.random() * 0.005;\n    scene.add(cube);\n    return cube;\n  }\n\n  export default createRock;","const createSpotlights = scene => {\n    var color = 0xFFFFFF;\n    var intensity = 5;\n    var distance = 25;\n    var angle = Math.PI / 2;\n  \n    new Array(6).fill('').forEach((item, i) => {\n      var spotlight = new THREE.SpotLight(color, intensity, distance, angle);\n      var value = i % 2 === 0 ? 25 : -25;\n  \n      spotlight.position.set(\n        i < 2 ? value : 0,\n        i >= 2 && i < 4 ? value : 0,\n        i >= 4 ? value : 0\n      );\n      scene.add(spotlight);\n    });\n  }\n\n  export default createSpotlights;","// Imports & constants\nimport createAsteroids from \"./helpers/create_asteroids\";\nimport createSpotlights from \"./helpers/create_spotlights\";\n\nglobal.THREE = require(\"three\");\nrequire(\"three/examples/js/controls/OrbitControls\");\nconst canvasSketch = require(\"canvas-sketch\");\nconst { Scene } = require(\"three\");\n\nconst settings = {\n  animate: true,\n  context: \"webgl\",\n  scaleToView: true\n};\n\nconst SCREEN_WIDTH = window.innerWidth;\nconst SCREEN_HEIGHT = window.innerHeight;\n\nconst update = (pointCloud, asteroids, renderer, scene, camera) => {\n  pointCloud.rotation.x -= 0.0001;\n  //pointCloud.rotation.y -= 0.001;\n  pointCloud.rotation.z -= 0.0001;\n  asteroids.forEach(function (obj) {\n    obj.rotation.x -= obj.r.x;\n    obj.rotation.y -= obj.r.y;\n    obj.rotation.z -= obj.r.z;\n  })\n\n  // renderer.render(scene, camera);\n  // requestAnimationFrame(update(pointCloud, asteroids, renderer, scene, camera))\n}\n\nconst sketch = ({ context }) => {\n\n  // RENDERER\n  const renderer = new THREE.WebGLRenderer({\n    canvas: context.canvas,\n    alpha: true,\n  });\n  renderer.setClearColor(\"#121212\", 1);\n\n  // CAMERA\n  const camera = new THREE.PerspectiveCamera(100, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 1000);\n  camera.position.set(30, 5, 35);\n\n  // ORBIT CONTROLS\n  const controls = new THREE.OrbitControls(camera, context.canvas);\n  controls.target.set(0, 5, 0);\n\n  // SCENE\n  const scene = new THREE.Scene();\n\n  // TEXTURES\n  const loader = new THREE.TextureLoader();\n  loader.crossOrigin = '';\n  const earthTexture = loader.load(\"../assets/earth.jpg\");\n  const asteroidTexture = loader.load(\"../assets/asteroid.jpg\");\n\n  // // MATERIALS\n  \n  const earthMaterial = new THREE.MeshStandardMaterial({ map: earthTexture });\n  const material = new THREE.PointsMaterial({\n    color: 0x555555\n  });\n\n  // MESHES\n  const geometry = new THREE.Geometry();\n\n  let x, y, z;\n  for (let i = 0; i < 2000; i++) {\n    x = (Math.random() * SCREEN_WIDTH * 2) - SCREEN_WIDTH;\n    y = (Math.random() * SCREEN_HEIGHT * 2) - SCREEN_HEIGHT;\n    z = (Math.random() * 3000) - 1500;\n\n    geometry.vertices.push(new THREE.Vector3(x, y, z));\n  };\n\n  const asteroids = createAsteroids(scene, asteroidTexture);\n\n  const earthGeometry = new THREE.SphereGeometry(1, 32, 16);\n  const earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);\n  earthMesh.position.set(0, 0, 0);\n  earthMesh.scale.setScalar(15);\n  scene.add(earthMesh);\n\n  //LIGHTING\n  const pointCloud = new THREE.PointCloud(geometry, material);\n  scene.add(pointCloud);\n  const light = new THREE.PointLight(\"white\", 1.25);\n  light.position.set(0, 0, 0);\n  scene.add(light);\n\n  // illuminate the earth\n  createSpotlights(scene);\n\n  return {\n    render({ time }) {\n      earthMesh.rotation.y = time * 0.15;\n\n      controls.update();\n      renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n      renderer.render(scene, camera);\n      // requestAnimationFrame(update(pointCloud, asteroids, renderer, scene, camera));\n    },\n\n    unload() {\n      controls.dispose();\n      renderer.dispose();\n    }\n  };\n};\n\ncanvasSketch(sketch, settings);","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}